openapi: 3.0.0
info:
  title: Polaris Catalog Documentation
  x-logo:
    url: ./img/logos/polaris-catalog-stacked-logo.svg
    altText: Polaris Catalog Logo
  description: "<!--\n\n Copyright (c) 2024 Snowflake Computing Inc.\n \n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n \n      http://www.apache.org/licenses/LICENSE-2.0\n \n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n\n-->\n\n# Quick Start\n\nThis guide serves as a introduction to several key entities that can be managed with Polaris, describes how to build and deploy Polaris locally, and finally includes examples of how to use Polaris with Spark and Trino.\n\n## Prerequisites\n\nThis guide covers building Polaris, deploying it locally or via [Docker](https://www.docker.com/), and interacting with it using the command-line interface and [Apache Spark](https://spark.apache.org/). Before proceeding with Polaris, be sure to satisfy the relevant prerequisites listed here. \n\n### Building and Deploying Polaris\n\nTo get the latest Polaris code, you'll need to clone the repository using [git](https://git-scm.com/). You can install git using [homebrew](https://brew.sh/):\n\n```\nbrew install git\n```\n\nThen, use git to clone the Polaris repo:\n\n```\ncd ~\ngit clone https://github.com/polaris-catalog/polaris.git\n```\n\n#### With Docker\n\nIf you plan to deploy Polaris inside [Docker](https://www.docker.com/)], you'll need to install docker itself. For can be done using [homebrew](https://brew.sh/):\n\n```\nbrew install docker\n```\n\nOnce installed, make sure Docker is running. This can be done on macOS with:\n\n```\nopen -a Docker\n```\n\n#### From Source\n\nIf you plan to build Polaris from source yourself, you will need to satisfy a few prerequisites first.\n\nPolaris is built using [gradle](https://gradle.org/) and is compatible with Java 21. We recommend the use of [jenv](https://www.jenv.be/) to manage multiple Java versions. For example, to install Java 21 via [homebre]w(https://brew.sh/) and configure it with jenv: \n\n```\ncd ~/polaris\njenv local 21\nbrew install openjdk@21 gradle@8 jenv\njenv add $(brew --prefix openjdk@21)\njenv local 21\n```\n\n### Connecting to Polaris\n\nPolaris is compatible with any [Apache Iceberg](https://iceberg.apache.org/) client that supports the REST API. Depending on the client you plan to use, refer to the prerequisites below.\n\n#### With Spark\n\nIf you want to connect to Polaris with [Apache Spark](https://spark.apache.org/), you'll need to start by cloning Spark. As [above](#building-and-deploying-polaris), make sure [git](https://git-scm.com/) is installed first. You can install it with [homebrew](https://brew.sh/):\n\n```\nbrew install git\n```\n\nThen, clone Spark and check out a versioned branch. This guide uses [Spark 3.5.0](https://spark.apache.org/releases/spark-release-3-5-0.html).\n\n```\ncd ~\ngit clone https://github.com/apache/spark.git\ncd ~/spark\ngit checkout branch-3.5.0\n```\n\n## Deploying Polaris \n\nPolaris can be deployed via a lightweight docker image or as a standalone process. Before starting, be sure that you've satisfied the relevant [prerequisites](#building-and-deploying-polaris) detailed above.\n\n### Docker Image\n\nTo start using Polaris in Docker, launch Polaris while Docker is running:\n\n```\ncd ~/polaris\ndocker compose -f docker-compose.yml up --build\n```\n\nOnce the `polaris-polaris` container is up, you can continue to [Defining a Catalog](#defining-a-catalog).\n\n### Building Polaris\n\nRun Polaris locally with:\n\n```\ncd ~/polaris\n./gradlew runApp\n```\n\nYou should see output for some time as Polaris builds and starts up. Eventually, you won’t see any more logs and should see messages that resemble the following:\n\n```\nINFO  [...] [main] [] o.e.j.s.handler.ContextHandler: Started i.d.j.MutableServletContextHandler@...\nINFO  [...] [main] [] o.e.j.server.AbstractConnector: Started application@...\nINFO  [...] [main] [] o.e.j.server.AbstractConnector: Started admin@...\nINFO  [...] [main] [] o.eclipse.jetty.server.Server: Started Server@...\n```\n\nAt this point, Polaris is running.\n\n## Bootstrapping Polaris\n\nFor this tutorial, we'll launch an instance of Polaris that stores entities only in-memory. This means that any entities that you define will be destroyed when Polaris is shut down. It also means that Polaris will automatically bootstrap itself with root credentials. For more information on how to configure Polaris for production usage, see the [docs](./configuring-polaris-for-production.md).\n\nWhen Polaris is launched using in-memory mode the root `CLIENT_ID` and `CLIENT_SECRET` can be found in stdout on initial startup. For example:\n\n```\nBootstrapped with credentials: {\"client-id\": \"XXXX\", \"client-secret\": \"YYYY\"}\n```\n\nBe sure to note of these credentials as we'll be using them below.\n\n## Defining a Catalog\n\nIn Polaris, the [catalog](./entities/catalog.md) is the top-level entity that objects like [tables](./entities.md#table) and [views](./entities.md#view) are organized under. With a Polaris service running, you can create a catalog like so:\n\n```\ncd ~/polaris\n\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  catalogs \\\n  create \\\n  --storage-type s3 \\\n  --default-base-location ${DEFAULT_BASE_LOCATION} \\\n  --role-arn ${ROLE_ARN} \\\n  quickstart_catalog\n```\n\nThis will create a new catalog called **quickstart_catalog**. \n\nThe `DEFAULT_BASE_LOCATION` you provide will be the default location that objects in this catalog should be stored in, and the `ROLE_ARN` you provide should be a [Role ARN](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference-arns.html) with access to read and write data in that location. These credentials will be provided to engines reading data from the catalog once they have authenticated with Polaris using credentials that have access to those resources.\n\nIf you’re using a storage type other than S3, such as Azure, you’ll provide a different type of credential than a Role ARN. For more details on supported storage types, see the [docs](./entities.md#storage-type). \n\nAdditionally, if Polaris is running somewhere other than `localhost:8181`, you can specify the correct hostname and port by providing `--host` and `--port` flags. For the full set of options supported by the CLI, please refer to the [docs](./command-line-interface.md).\n\n\n### Creating a Principal and Assigning it Privileges\n\nWith a catalog created, we can create a [principal](./entities.md#principal) that has access to manage that catalog. For details on how to configure the Polaris CLI, see [the section above](#defining-a-catalog) or refer to the [docs](./command-line-interface.md).\n\n```\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  principals \\\n  create \\\n  quickstart_user\n\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  principal-roles \\\n  create \\\n  quickstart_user_role\n\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  catalog-roles \\\n  create \\\n  --catalog quickstart_catalog \\\n  quickstart_catalog_role\n```\n\n\nBe sure to provide the necessary credentials, hostname, and port as before.\n\nWhen the `principals create` command completes successfully, it will return the credentials for this new principal. Be sure to note these down for later. For example:\n\n```\n./polaris ... principals create example\n{\"clientId\": \"XXXX\", \"clientSecret\": \"YYYY\"}\n```\n\nNow, we grant the principal the [principal role](./entities.md#principal-role) we created, and grant the [catalog role](./entities.md#catalog-role) the principal role we created. For more information on these entities, please refer to the linked documentation.\n\n```\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  principal-roles \\\n  grant \\\n  --principal quickstart_user \\\n  quickstart_user_role\n\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  catalog-roles \\\n  grant \\\n  --catalog quickstart_catalog \\\n  --principal-role quickstart_user_role \\\n  quickstart_catalog_role\n```\n\nNow, we’ve linked our principal to the catalog via roles like so:\n\n![Principal to Catalog](./img/quickstart/privilege-illustration-1.png \"Principal to Catalog\")\n\nIn order to give this principal the ability to interact with the catalog, we must assign some [privileges](./entities.md#privileges). For the time being, we will give this principal the ability to fully manage content in our new catalog. We can do this with the CLI like so:\n\n```\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  privileges \\\n  --catalog quickstart_catalog \\\n  --catalog-role quickstart_catalog_role \\\n  catalog \\\n  grant \\\n  CATALOG_MANAGE_CONTENT\n```\n\nThis grants the [catalog privileges](./entities.md#privilege) `CATALOG_MANAGE_CONTENT` to our catalog role, linking everything together like so:\n\n![Principal to Catalog with Catalog Role](./img/quickstart/privilege-illustration-2.png \"Principal to Catalog with Catalog Role\")\n\n`CATALOG_MANAGE_CONTENT` has create/list/read/write privileges on all entities within the catalog. The same privilege could be granted to a namespace, in which case the principal could create/list/read/write any entity under that namespace.\n\n## Using Iceberg & Polaris\n\nAt this point, we’ve created a principal and granted it the ability to manage a catalog. We can now use an external engine to assume that principal, access our catalog, and store data in that catalog using [Apache Iceberg](https://iceberg.apache.org/).\n\n### Connecting with Spark\n\nTo use a Polaris-managed catalog in [Apache Spark](https://spark.apache.org/), we can configure Spark to use the Iceberg catalog REST API. \n\nThis guide uses [Apache Spark 3.5](https://spark.apache.org/releases/spark-release-3-5-0.html), but be sure to find [the appropriate iceberg-spark package for your Spark version](https://mvnrepository.com/artifact/org.apache.iceberg/iceberg-spark). With a local Spark clone, we on the `branch-3.5` branch we can run the following:\n\n_Note: the credentials provided here are those for our principal, not the root credentials._\n\n```\nbin/spark-shell \\\n--packages org.apache.iceberg:iceberg-spark-runtime-3.5_2.12:1.5.2,org.apache.hadoop:hadoop-aws:3.4.0 \\\n--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions \\\n--conf spark.sql.catalog.quickstart_catalog.warehouse=quickstart_catalog \\\n--conf spark.sql.catalog.quickstart_catalog.header.X-Iceberg-Access-Delegation=true \\\n--conf spark.sql.catalog.quickstart_catalog=org.apache.iceberg.spark.SparkCatalog \\\n--conf spark.sql.catalog.quickstart_catalog.catalog-impl=org.apache.iceberg.rest.RESTCatalog \\\n--conf spark.sql.catalog.quickstart_catalog.uri=http://localhost:8181/api/catalog \\\n--conf spark.sql.catalog.quickstart_catalog.credential='XXXX:YYYY' \\\n--conf spark.sql.catalog.quickstart_catalog.scope='PRINCIPAL_ROLE:ALL' \\\n--conf spark.sql.catalog.quickstart_catalog.token-refresh-enabled=true\n```\n\n\nReplace `XXXX` and `YYYY` with the client ID and client secret generated when you created the `quickstart_user` principal.\n\nSimilar to the CLI commands above, this configures Spark to use the Polaris running at `localhost:8181` as a catalog. If your Polaris server is running elsewhere, but sure to update the configuration appropriately.\n\nFinally, note that we include the `hadoop-aws` package here. If your table is using a different filesystem, be sure to include the appropriate dependency.\n\nOnce the Spark session starts, we can create a namespace and table within the catalog:\n\n```\nspark.sql(\"USE quickstart_catalog\")\nspark.sql(\"CREATE NAMESPACE IF NOT EXISTS quickstart_namespace\")\nspark.sql(\"CREATE NAMESPACE IF NOT EXISTS quickstart_namespace.schema\")\nspark.sql(\"USE NAMESPACE quickstart_namespace.schema\")\nspark.sql(\"\"\"\n\tCREATE TABLE IF NOT EXISTS quickstart_table (\n\t\tid BIGINT, data STRING\n\t) \nUSING ICEBERG\n\"\"\")\n```\n\nWe can now use this table like any other:\n\n```\nspark.sql(\"INSERT INTO quickstart_table VALUES (1, 'some data')\")\nspark.sql(\"SELECT * FROM quickstart_table\").show(false)\n. . .\n+---+---------+\n|id |data     |\n+---+---------+\n|1  |some data|\n+---+---------+\n```\n\nIf at any time access is revoked...\n\n```\n./polaris \\\n  --client-id ${CLIENT_ID} \\\n  --client-secret ${CLIENT_SECRET} \\\n  privileges \\\n  --catalog quickstart_catalog \\\n  --catalog-role quickstart_catalog_role \\\n  catalog \\\n  revoke \\\n  CATALOG_MANAGE_CONTENT\n```\n\nSpark will lose access to the table:\n\n```\nspark.sql(\"SELECT * FROM quickstart_table\").show(false)\n\norg.apache.iceberg.exceptions.ForbiddenException: Forbidden: Principal 'quickstart_user' with activated PrincipalRoles '[]' and activated ids '[6, 7]' is not authorized for op LOAD_TABLE_WITH_READ_DELEGATION\n```\n"
  contact:
    email: community [at] polaris.io
    url: https://github.com/polaris-catalog/polaris
  license:
    name: Apache v2.0
    url: https://github.com/polaris-catalog/polaris/blob/main/LICENSE
servers:
  - url: '{scheme}://{host}/api/management/v1'
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        description: The scheme of the URI, either http or https.
        default: https
      host:
        description: The host address for the specified server
        default: localhost
  - url: '{scheme}://{host}/{basePath}'
    description: Server URL when the port can be inferred from the scheme
    variables:
      scheme:
        description: The scheme of the URI, either http or https.
        default: https
      host:
        description: The host address for the specified server
        default: localhost
      basePath:
        description: Optional prefix to be appended to all routes
        default: ''
  - url: '{scheme}://{host}:{port}/{basePath}'
    description: Generic base server URL, with all parts configurable
    variables:
      scheme:
        description: The scheme of the URI, either http or https.
        default: https
      host:
        description: The host address for the specified server
        default: localhost
      port:
        description: The port used when addressing the host
        default: '443'
      basePath:
        description: Optional prefix to be appended to all routes
        default: ''
tags:
  - name: Polaris Catalog Overview
    description: >+
      <!--

       Copyright (c) 2024 Snowflake Computing Inc.
       
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
       
            http://www.apache.org/licenses/LICENSE-2.0
       
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

      -->


      Polaris Catalog is a catalog implementation for Apache Iceberg built on
      the open source Apache Iceberg REST protocol.


      With Polaris Catalog, you can provide centralized, secure read and write
      access across different REST-compatible query engines to your Iceberg
      tables.


      ![Conceptual diagram of Polaris Catalog.](./img/overview.svg "Polaris
      Catalog overview")


      ## Key concepts


      This section introduces key concepts associated with using Polaris
      Catalog.


      In the following diagram, a sample [Polaris Catalog
      structure](./overview.md#catalog) with nested
      [namespaces](./overview.md#namespace) is shown for Catalog1. No tables

      or namespaces have been created yet for Catalog2 or Catalog3:


      ![Diagram that shows an example Polaris Catalog
      structure.](./img/sample-catalog-structure.svg "Sample Polaris Catalog
      structure")


      ### Catalog


      In Polaris Catalog, you can create one or more catalog resources to
      organize Iceberg tables.


      Configure your catalog by setting values in the storage configuration for
      S3, Azure, or Google Cloud Storage. An Iceberg catalog enables a

      query engine to manage and organize tables. The catalog forms the first
      architectural layer in the [Iceberg table
      specification](https://iceberg.apache.org/spec/#overview) and must
      support:


      -   Storing the current metadata pointer for one or more Iceberg tables. A
      metadata pointer maps a table name to the location of that table's
          current metadata file.

      -   Performing atomic operations so that you can update the current
      metadata pointer for a table to the metadata pointer of a new version of
          the table.

      To learn more about Iceberg catalogs, see the [Apache Iceberg
      documentation](https://iceberg.apache.org/concepts/catalog/).


      #### Catalog types


      A catalog can be one of the following two types:


      -   Internal: The catalog is managed by Polaris. Tables from this catalog
      can be read and written in Polaris.


      -   External: The catalog is externally managed by another Iceberg catalog
      provider (for example, Snowflake, Glue, Dremio Arctic). Tables from 
          this catalog are synced to Polaris. These tables are read-only in Polaris. In the current release, only Snowflake external catalog is provided.

      A catalog is configured with a storage configuration that can point to S3,
      Azure storage, or GCS.


      To create a new catalog, see [Create a catalog](./create-a-catalog.md
      "Sample Polaris Catalog structure").


      ### Namespace


      You create *namespaces* to logically group Iceberg tables within a
      catalog. A catalog can have one or more namespaces. You can also create

      nested namespaces. Iceberg tables belong to namespaces.


      ### Iceberg tables & catalogs


      In an internal catalog, an Iceberg table is registered in Polaris Catalog,
      but read and written via query engines. The table data and

      metadata is stored in your external cloud storage. The table uses Polaris
      Catalog as the Iceberg catalog.


      If you have tables that use Snowflake as the Iceberg catalog
      (Snowflake-managed tables), you can sync these tables to an external

      catalog in Polaris Catalog. If you sync this catalog to Polaris Catalog,
      it appears as an external catalog in Polaris Catalog. The table data and

      metadata is stored in your external cloud storage. The Snowflake query
      engine can read from or write to these tables. However, the other query

      engines can only read from these tables.


      **Important**


      To ensure that the access privileges defined for a catalog are enforced

      correctly, you must:


      -   Ensure a directory only contains the data files that belong to a
          single table.

      -   Create a directory hierarchy that matches the namespace hierarchy
          for the catalog.

      For example, if a catalog includes:


      -   Top-level namespace namespace1


      -   Nested namespace namespace1a


      -   A customers table, which is grouped under nested namespace
          namespace1a

      -   An orders table, which is grouped under nested namespace namespace1a


      The directory hierarchy for the catalog must be:


      -   /namespace1/namespace1a/customers/\<files for the customers table
          *only*\>

      -   /namespace1/namespace1a/orders/\<files for the orders table *only*\>


      ### Service principal


      A service principal is an entity that you create in Polaris Catalog. Each
      service principal encapsulates credentials that you use to connect

      to Polaris Catalog.


      Query engines use service principals to connect to catalogs.


      Polaris Catalog generates a Client ID and Client Secret pair for each
      service principal.


      The following table displays example service principals that you might
      create in Polaris Catalog:

        | Service connection name     | Description |
        | --------------------------- | ----------- |
        |  Flink ingestion            | For Apache Flink to ingest streaming data into Iceberg tables. |
        |  Spark ETL pipeline         | For Apache Spark to run ETL pipeline jobs on Iceberg tables. |
        |  Snowflake data pipelines   | For Snowflake to run data pipelines for transforming data in Iceberg tables.  |
        |  Trino BI dashboard         | For Trino to run BI queries for powering a dashboard. |
        |  Snowflake AI team          | For Snowflake to run AI jobs on data in Iceberg tables. |

      ### Service connection


      A service connection represents a REST-compatible engine (such as Apache
      Spark, Apache Flink, or Trino) that can read from and write to Polaris

      Catalog. When creating a new service connection, the Polaris administrator
      grants the service principal that is created with the new service 

      connection with either a new or existing principal role. A principal role
      is a resource in Polaris that you can use to logically group Polaris 

      service principals together and grant privileges on securable objects. For
      more information, see [Principal role](./access-control.md#principal-role
      "Principal role"). Polaris Catalog uses a role-based access control (RBAC)
      model to grant service principals access to resources. For more
      information, 

      see [Access control](./access-control.md "Access control"). For a diagram
      of this model, see [RBAC model](./access-control.md#rbac-model "RBAC
      model").


      If the Polaris administrator grants the service principal for the new
      service connection with a new principal role, the service principal

      doesn\'t have any privileges granted to it yet. When securing the catalog
      that the new service connection will connect to, the Polaris

      administrator grants privileges to catalog roles and then grants these
      catalog roles to the new principal role. As a result, the service

      principal for the new service connection is bestowed with these
      privileges. For more information about catalog roles, see [Catalog
      role](./access-control.md#catalog-role "Catalog role").


      If the Polaris administrator grants an existing principal role to the
      service principal for the new service connection, the service principal

      is bestowed with the privileges granted to the catalog roles that are
      granted to the existing principal role. If needed, the Polaris

      administrator can grant additional catalog roles to the existing principal
      role or remove catalog roles from it to adjust the privileges

      bestowed to the service principal. For an example of how RBAC works in
      Polaris, see [RBAC example](./access-control.md#rbac-example "RBAC
      example").


      ### Storage configuration


      A storage configuration stores a generated identity and access management
      (IAM) entity for your external cloud storage and is created

      when you create a catalog. The storage configuration is used to set the
      values to connect Polaris Catalog to your cloud storage. During the

      catalog creation process, an IAM entity is generated and used to create a
      trust relationship between the cloud storage provider and Polaris

      Catalog.


      When you create a catalog, you supply the following information about your
      external cloud storage:


      | Cloud storage provider | Information |

      | -----------------------| ----------- |

      | Amazon S3 | <ul><li>Default base location for your Amazon S3
      bucket</li><li>Locations for your Amazon S3 bucket</li><li>S3 role
      ARN</li><li>External ID (optional)</li></ul> |

      | Google Cloud Storage (GCS) | <ul><li>Default base location for your GCS
      bucket</li><li>Locations for your Amazon GCS bucket</li></ul> |

      | Azure | <ul><li>Default base location for your Microsoft Azure
      container</li><li>Locations for your Microsoft Azure
      container</li><li>Azure tenant ID</li></ul> |


      ## Example workflow


      In the following example workflow, Bob creates an Iceberg table named
      Table1 and Alice reads data from Table1.


      1.  Bob uses Apache Spark to create the Table1 table under the
          Namespace1 namespace in the Catalog1 catalog and insert values into
          Table1.

          Bob can create Table1 and insert data into it, because he is using a
          service connection with a service principal that is bestowed with
          the privileges to perform these actions.

      2.  Alice uses Snowflake to read data from Table1.

          Alice can read data from Table1, because she is using a service
          connection with a service principal with a catalog integration that
          is bestowed with the privileges to perform this action. Alice
          creates an unmanaged table in Snowflake to read data from Table1.

      ![Diagram that shows an example workflow for Polaris
      Catalog](./img/example-workflow.svg "Example workflow for Polaris
      Catalog")


      ## Security and access control


      This section describes security and access control.


      ### Credential vending


      To secure interactions with service connections, Polaris Catalog vends
      temporary storage credentials to the query engine during query

      execution. These credentials allow the query engine to run the query
      without needing to have access to your external cloud storage for

      Iceberg tables. This process is called credential vending.


      ### Identity and access management (IAM)


      Polaris Catalog uses the identity and access management (IAM) entity to
      securely connect to your storage for accessing table data, Iceberg

      metadata, and manifest files that store the table schema, partitions, and
      other metadata. Polaris Catalog retains the IAM entity for your

      storage location.


      ### Access control


      Polaris Catalog enforces the access control that you configure across all
      tables registered with the service, and governs security for all

      queries from query engines in a consistent manner.


      Polaris uses a role-based access control (RBAC) model that lets you
      centrally configure access for Polaris service principals to catalogs,

      namespaces, and tables.


      Polaris RBAC uses two different role types to delegate privileges:


      -   **Principal roles:** Granted to Polaris service principals and
          analogous to roles in other access control systems that you grant to
          service principals.

      -   **Catalog roles:** Configured with certain privileges on Polaris
          catalog resources, and granted to principal roles.

      For more information, see [Access control](./access-control.md "Access
      control").

    x-displayName: Polaris Catalog Overview
  - name: Polaris Catalog Entities
    description: >
      <!--

       Copyright (c) 2024 Snowflake Computing Inc.
       
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
       
            http://www.apache.org/licenses/LICENSE-2.0
       
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

      -->


      This page documents various entities that can be managed in Polaris.


      ## Catalog


      A catalog is a top-level entity in Polaris that may contain other entities
      like [namespaces](#namespace) and [tables](#table). These map directly to
      [Apache Iceberg catalogs](https://iceberg.apache.org/concepts/catalog/).


      For information on managing catalogs with the REST API or for more
      information on what data can be associated with a catalog, see [the API
      docs](../regtests/client/python/docs/CreateCatalogRequest.md).


      ### Storage Type


      All catalogs in Polaris are associated with a _storage type_. Valid
      Storage Types are `S3`, `Azure`, and `GCS`. The `FILE` type is also
      additionally available for testing. Each of these types relates to a
      different storage provider where data within the catalog may reside.
      Depending on the storage type, various other configurations may be set for
      a catalog including credentials to be used when accessing data inside the
      catalog.


      For details on how to use Storage Types in the REST API, see [the API
      docs](../regtests/client/python/docs/StorageConfigInfo.md).


      ## Namespace


      A namespace is a logical entity that resides within a [catalog](#catalog)
      and can contain other entities such as [tables](#table) or [views](#view).
      Some other systems may refer to namespaces as _schemas_ or _databases_.


      In Polaris, namespaces can be nested up to 16 levels. For example,
      `a.b.c.d.e.f.g` is a valid namespace. `b` is said to reside within `a`,
      and so on.


      For information on managing namespaces with the REST API or for more
      information on what data can be associated with a namespace, see [the API
      docs](../regtests/client/python/docs/CreateNamespaceRequest.md).



      ## Table


      Polaris tables are entities that map to [Apache Iceberg
      tables](https://iceberg.apache.org/docs/nightly/configuration/).


      For information on managing tables with the REST API or for more
      information on what data can be associated with a table, see [the API
      docs](../regtests/client/python/docs/CreateTableRequest.md).


      ## View


      Polaris views are entities that map to [Apache Iceberg
      views](https://iceberg.apache.org/view-spec/).


      For information on managing views with the REST API or for more
      information on what data can be associated with a view, see [the API
      docs](../regtests/client/python/docs/CreateViewRequest.md).


      ## Principal


      Polaris principals are unique identities that can be used to represent
      users or services. Each principal may have one or more [principal
      roles](#principal-role) assigned to it for the purpose of accessing
      catalogs and the entities within them.


      For information on managing principals with the REST API or for more
      information on what data can be associated with a principal, see [the API
      docs](../regtests/client/python/docs/CreatePrincipalRequest.md).


      ## Principal Role


      Polaris principal roles are labels that may be granted to
      [principals](#principal). Each principal may have one or more principal
      roles, and the same principal role may be granted to multiple principals.
      Principal roles may be assigned based on the persona or responsibilities
      of a given principal, or on how that principal will need to access
      different entities within Polaris.


      For information on managing principal roles with the REST API or for more
      information on what data can be associated with a principal role, see [the
      API docs](../regtests/client/python/docs/CreatePrincipalRoleRequest.md).



      ## Catalog Role


      Polaris catalog roles are labels that may be granted to
      [catalogs](#catalog). Each catalog may have one or more catalog roles, and
      the same catalog role may be granted to multiple catalogs. Catalog roles
      may be assigned based on the nature of data that will reside in a catalog,
      or by the groups of users and services that might need to access that
      data. 


      Each catalog role may have multiple [privileges](#privilege) granted to
      it, and each catalog role can be granted to one or more [principal
      roles](#principal-role). This is the mechanism by which principals are
      granted access to entities inside a catalog such as namespaces and tables.


      ## Privilege


      Polaris privileges are granted to [catalog roles](#catalog-role) in order
      to grant principals with a given principal role some degree of access to
      catalogs with a given catalog role. When a privilege is granted to a
      catalog role, any principal roles granted that catalog role receive the
      privilege. In turn, any principals who are granted that principal role
      receive it. 


      A privilege can be scoped to any entity inside a catalog, including the
      catalog itself.


      For a list of supported privileges for each privilege class, see the API
      docs:

      * [Table Privileges](../regtests/client/python/docs/TablePrivilege.md)

      * [View Privileges](../regtests/client/python/docs/ViewPrivilege.md)

      * [Namespace
      Privileges](../regtests/client/python/docs/NamespacePrivilege.md)

      * [Catalog Privileges](../regtests/client/python/docs/CatalogPrivilege.md)
    x-displayName: Polaris Catalog Entities
  - name: Access Control
    description: >
      <!--

       Copyright (c) 2024 Snowflake Computing Inc.
       
       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at
       
            http://www.apache.org/licenses/LICENSE-2.0
       
       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

      -->


      This section provides information about how access control works for
      Polaris Catalog.


      Polaris Catalog uses a role-based access control (RBAC) model, in which
      the Polaris administrator assigns access privileges to catalog roles,

      and then grants service principals access to resources by assigning
      catalog roles to principal roles.


      The key concepts to understanding access control in Polaris are:


      -   **Securable object**

      -   **Principal role**

      -   **Catalog role**

      -   **Privilege**


      ## Securable object


      A securable object is an object to which access can be granted. Polaris

      has the following securable objects:


      -   Catalog

      -   Namespace

      -   Iceberg table

      -   View


      ## Principal role


      A principal role is a resource in Polaris that you can use to logically
      group Polaris service principals together and grant privileges on

      securable objects.


      Polaris supports a many-to-one relationship between service principals and
      principal roles. For example, to grant the same privileges to

      multiple service principals, you can grant a single principal role to
      those service principals. A service principal can be granted one

      principal role. When registering a service connection, the Polaris
      administrator specifies the principal role that is granted to the

      service principal.


      You don't grant privileges directly to a principal role. Instead, you
      configure object permissions at the catalog role level, and then grant

      catalog roles to a principal role.


      The following table shows examples of principal roles that you might
      configure in Polaris:


      | Principal role name | Description |

      | -----------------------| ----------- |

      | Data_engineer   | A role that is granted to multiple service principals
      for running data engineering jobs. |

      | Data_scientist | A role that is granted to multiple service principals
      for running data science or AI jobs. |


      ## Catalog role


      A catalog role belongs to a particular catalog resource in Polaris and
      specifies a set of permissions for actions on the catalog, or on objects

      in the catalog, such as catalog namespaces or tables. You can create one
      or more catalog roles for a catalog.


      You grant privileges to a catalog role, and then grant the catalog role to
      a principal role to bestow the privileges to one or more service

      principals.


      **Note**


      If you update the privileges bestowed to a service principal, the updates
      won\'t take effect for up to one hour. This means that if you

      revoke or grant some privileges for a catalog, the updated privileges
      won\'t take effect on any service principal with access to that catalog

      for up to one hour.


      Polaris also supports a many-to-many relationship between catalog roles
      and principal roles. You can grant the same catalog role to one or more

      principal roles. Likewise, a principal role can be granted to one or more
      catalog roles.


      The following table displays examples of catalog roles that you might

      configure in Polaris:


      | Example Catalog role | Description |

      | -----------------------| ----------- |

      | Catalog administrators   | A role that has been granted multiple
      privileges to emulate full access to the catalog.<br /><br />Principal
      roles that have been granted this role are permitted to create, alter,
      read, write, and drop tables in the catalog.  |

      | Catalog readers      | A role that has been granted read-only privileges
      to tables in the catalog.<br /><br />Principal roles that have been
      granted this role are allowed to read from tables in the catalog. |

      | Catalog contributor   | A role that has been granted read and write
      access privileges to all tables that belong to the catalog.<br /><br
      />Principal roles that have been granted this role are allowed to perform
      read and write operations on tables in the catalog. |


      ## RBAC model


      The following diagram illustrates the RBAC model used by Polaris Catalog.
      For each catalog, the Polaris administrator assigns access

      privileges to catalog roles, and then grants service principals access to
      resources by assigning catalog roles to principal roles. Polaris

      supports a many-to-one relationship between service principals and
      principal roles.


      ![Diagram that shows the RBAC model for Polaris
      Catalog.](./img/rbac-model.svg "Polaris Catalog RBAC model")


      ## Access control privileges


      This section describes the privileges that are available in the Polaris
      access control model. Privileges are granted to catalog roles, catalog

      roles are granted to principal roles, and principal roles are granted to
      service principals to specify the operations that service principals can

      perform on objects in Polaris.


      To grant the full set of privileges (drop, list, read, write, etc.) on an
      object, you can use the *full privilege* option.


      ### Table privileges


      **Note**


      The TABLE_FULL_METADATA full privilege doesn't grant access to the
      TABLE_READ_DATA or TABLE_WRITE_DATA individual privileges.


      | Full privilege | Individual privilege | Description |

      | -----------------------| ----------- | ---- |

      | TABLE_FULL_METADATA | TABLE_CREATE | Enables registering a table with
      the catalog. |

      |  | TABLE_DROP | Enables dropping a table from the catalog. |

      |  | TABLE_LIST | Enables listing any tables in the catalog. |

      |  | TABLE_READ_PROPERTIES | Enables reading
      [properties](https://iceberg.apache.org/docs/nightly/configuration/#table-properties)
      of the table. |

      |  | TABLE_WRITE_PROPERTIES | Enables configuring
      [properties](https://iceberg.apache.org/docs/nightly/configuration/#table-properties)
      for the table. |

      | N/A | TABLE_READ_DATA | Enables reading data from the table by receiving
      short-lived read-only storage credentials from the catalog. |

      | N/A | TABLE_WRITE_DATA | Enables writing data to the table by receiving
      short-lived read+write storage credentials from the catalog. |


      ### View privileges


      | Full privilege | Individual privilege | Description |

      | -----------------------| ----------- | ---- |

      | VIEW_FULL_METADATA | VIEW_CREATE  | Enables registering a view with the
      catalog. |

      |  | VIEW_DROP | Enables dropping a view from the catalog. |

      |  | VIEW_LIST | Enables listing any views in the catalog.  |

      |  | VIEW_READ_PROPERTIES | Enables reading all the view properties. |

      |  | VIEW_WRITE_PROPERTIES | Enables configuring view properties. |


      ### Namespace privileges


      | Full privilege | Individual privilege | Description |

      | -----------------------| ----------- | ---- |

      | NAMESPACE_FULL_METADATA | NAMESPACE_CREATE | Enables creating a
      namespace in a catalog. |

      |  | NAMESPACE_DROP | Enables dropping the namespace from the catalog. |

      |  | NAMESPACE_LIST | Enables listing any object in the namespace,
      including nested namespaces and tables. |

      |  | NAMESPACE_READ_PROPERTIES | Enables reading all the namespace
      properties. |

      |  | NAMESPACE_WRITE_PROPERTIES | Enables configuring namespace
      properties. |


      ### Catalog privileges


      | Privilege | Description |

      | -----------------------| ----------- |

      | CATALOG_MANAGE_ACCESS | Includes the ability to grant or revoke
      privileges on objects in a catalog to catalog roles, and the ability to
      grant or revoke catalog roles to or from principal roles. |

      | CATALOG_MANAGE_CONTENT | Enables full management of content for the
      catalog. This privilege encompasses the following
      privileges:<ul><li>CATALOG_MANAGE_METADATA</li><li>TABLE_FULL_METADATA</li><li>NAMESPACE_FULL_METADATA</li><li>VIEW_FULL_METADATA</li><li>TABLE_WRITE_DATA</li><li>TABLE_READ_DATA</li><li>CATALOG_READ_PROPERTIES</li><li>CATALOG_WRITE_PROPERTIES</li></ul>
      |

      | CATALOG_MANAGE_METADATA | Enables full management of the catalog, as
      well as catalog roles, namespaces, and tables.  |

      | CATALOG_READ_PROPERTIES | Enables listing catalogs and reading
      properties of the catalog. |

      | CATALOG_WRITE_PROPERTIES | Enables configuring catalog properties. |


      ## RBAC example


      The following diagram illustrates how RBAC works in Polaris, and

      includes the following users:


      -   **Alice**: A service admin who signs up for Polaris. Alice can
          create service principals. She can also create catalogs and
          namespaces, and configure access control for Polaris resources.

      > **Note**

      >

      > The service principal for Alice is not visible in the Polaris Catalog

      > user interface.


      -   **Bob**: A data engineer who uses Snowpipe Streaming (in Snowflake)
          and Apache Spark connections to interact with Polaris.

          -   Alice has created a service principal for Bob. It has been
              granted the Data_engineer principal role, which in turn has been
              granted the following catalog roles: Catalog contributor and
              Data administrator (for both the Silver and Gold zone catalogs
              in the following diagram).

          -   The Catalog contributor role grants permission to create
              namespaces and tables in the Bronze zone catalog.

          -   The Data administrator roles grant full administrative rights to
              the Silver zone catalog and Gold zone catalog.

      -   **Mark**: A data scientist who uses Snowflake AI services to
          interact with Polaris.

          -   Alice has created a service principal for Mark. It has been
              granted the Data_scientist principal role, which in turn has
              been granted the catalog role named Catalog reader.

          -   The Catalog reader role grants read-only access for a catalog
              named Gold zone catalog.

      ![Diagram that shows an example of how RBAC works in Polaris
      Catalog.](./img/rbac-example.svg "Polaris Catalog RBAC example")
    x-displayName: Access Control
  - name: polaris-management-service_other
    x-displayName: other
  - name: Configuration API
    x-displayName: Configuration API
  - name: OAuth2 API
    x-displayName: OAuth2 API
  - name: Catalog API
    x-displayName: Catalog API
paths:
  /catalogs:
    get:
      operationId: listCatalogs
      description: List all catalogs in this polaris service
      responses:
        '200':
          description: List of catalogs in the polaris service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Catalogs'
        '403':
          description: The caller does not have permission to list catalog details
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    post:
      operationId: createCatalog
      description: Add a new Catalog
      requestBody:
        description: The Catalog to create
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_CreateCatalogRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: The caller does not have permission to create a catalog
        '404':
          description: The catalog does not exist
        '409':
          description: A catalog with the specified name already exists
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /catalogs/{catalogName}:
    parameters:
      - name: catalogName
        in: path
        description: The name of the catalog
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: getCatalog
      description: Get the details of a catalog
      responses:
        '200':
          description: The catalog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
        '403':
          description: The caller does not have permission to read catalog details
        '404':
          description: The catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: updateCatalog
      description: Update an existing catalog
      requestBody:
        description: The catalog details to use in the update
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_UpdateCatalogRequest
      responses:
        '200':
          description: The catalog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
        '403':
          description: The caller does not have permission to update catalog details
        '404':
          description: The catalog does not exist
        '409':
          description: >-
            The entity version doesn't match the currentEntityVersion; retry
            after fetching latest version
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    delete:
      operationId: deleteCatalog
      description: >-
        Delete an existing catalog. This is a cascading operation that deletes
        all metadata, including principals, roles and grants. If the catalog is
        an internal catalog, all tables and namespaces are dropped without
        purge.
      responses:
        '204':
          description: Success, no content
        '403':
          description: The caller does not have permission to delete a catalog
        '404':
          description: The catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principals:
    get:
      operationId: listPrincipals
      description: List the principals for the current catalog
      responses:
        '200':
          description: List of principals for this catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Principals'
        '403':
          description: The caller does not have permission to list catalog admins
        '404':
          description: The catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    post:
      operationId: createPrincipal
      description: Create a principal
      requestBody:
        description: The principal to create
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_CreatePrincipalRequest
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Polaris_Management_Service_PrincipalWithCredentials
        '403':
          description: The caller does not have permission to add a principal
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principals/{principalName}:
    parameters:
      - name: principalName
        in: path
        description: The principal name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: getPrincipal
      description: Get the principal details
      responses:
        '200':
          description: The requested principal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Principal'
        '403':
          description: The caller does not have permission to get principal details
        '404':
          description: The catalog or principal does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: updatePrincipal
      description: Update an existing principal
      requestBody:
        description: The principal details to use in the update
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_UpdatePrincipalRequest
      responses:
        '200':
          description: The updated principal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Principal'
        '403':
          description: The caller does not have permission to update principal details
        '404':
          description: The principal does not exist
        '409':
          description: >-
            The entity version doesn't match the currentEntityVersion; retry
            after fetching latest version
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    delete:
      operationId: deletePrincipal
      description: Remove a principal from polaris
      responses:
        '204':
          description: Success, no content
        '403':
          description: The caller does not have permission to delete a principal
        '404':
          description: The principal does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principals/{principalName}/rotate:
    parameters:
      - name: principalName
        in: path
        description: The user name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    post:
      operationId: rotateCredentials
      description: >-
        Rotate a principal's credentials. The new credentials will be returned
        in the response. This is the only API, aside from createPrincipal, that
        returns the user's credentials. This API is *not* idempotent.
      responses:
        '200':
          description: The principal details along with the newly rotated credentials
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Polaris_Management_Service_PrincipalWithCredentials
        '403':
          description: The caller does not have permission to rotate credentials
        '404':
          description: The principal does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principals/{principalName}/principal-roles:
    parameters:
      - name: principalName
        in: path
        description: The name of the target principal
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listPrincipalRolesAssigned
      description: List the roles assigned to the principal
      responses:
        '200':
          description: List of roles assigned to this principal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRoles'
        '403':
          description: The caller does not have permission to list roles
        '404':
          description: The principal or catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: assignPrincipalRole
      description: Add a role to the principal
      requestBody:
        description: The principal role to assign
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_GrantPrincipalRoleRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: >-
            The caller does not have permission to add assign a role to the
            principal
        '404':
          description: The catalog, the principal, or the role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principals/{principalName}/principal-roles/{principalRoleName}:
    parameters:
      - name: principalName
        in: path
        description: The name of the target principal
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: principalRoleName
        in: path
        description: The name of the role
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    delete:
      operationId: revokePrincipalRole
      description: Remove a role from a catalog principal
      responses:
        '204':
          description: Success, no content
        '403':
          description: >-
            The caller does not have permission to remove a role from the
            principal
        '404':
          description: The catalog or principal does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principal-roles:
    get:
      operationId: listPrincipalRoles
      description: List the principal roles
      responses:
        '200':
          description: List of principal roles
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRoles'
        '403':
          description: The caller does not have permission to list principal roles
        '404':
          description: The catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    post:
      operationId: createPrincipalRole
      description: Create a principal role
      requestBody:
        description: The principal to create
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_CreatePrincipalRoleRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: The caller does not have permission to add a principal role
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principal-roles/{principalRoleName}:
    parameters:
      - name: principalRoleName
        in: path
        description: The principal role name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: getPrincipalRole
      description: Get the principal role details
      responses:
        '200':
          description: The requested principal role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRole'
        '403':
          description: The caller does not have permission to get principal role details
        '404':
          description: The principal role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: updatePrincipalRole
      description: Update an existing principalRole
      requestBody:
        description: The principalRole details to use in the update
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_UpdatePrincipalRoleRequest
      responses:
        '200':
          description: The updated principal role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRole'
        '403':
          description: The caller does not have permission to update principal role details
        '404':
          description: The principal role does not exist
        '409':
          description: >-
            The entity version doesn't match the currentEntityVersion; retry
            after fetching latest version
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    delete:
      operationId: deletePrincipalRole
      description: Remove a principal role from polaris
      responses:
        '204':
          description: Success, no content
        '403':
          description: The caller does not have permission to delete a principal role
        '404':
          description: The principal role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principal-roles/{principalRoleName}/principals:
    parameters:
      - name: principalRoleName
        in: path
        description: The principal role name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listAssigneePrincipalsForPrincipalRole
      description: List the Principals to whom the target principal role has been assigned
      responses:
        '200':
          description: >-
            List the Principals to whom the target principal role has been
            assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_Principals'
        '403':
          description: The caller does not have permission to list principals
        '404':
          description: The principal role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principal-roles/{principalRoleName}/catalog-roles/{catalogName}:
    parameters:
      - name: principalRoleName
        in: path
        description: The principal role name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogName
        in: path
        required: true
        description: The name of the catalog where the catalogRoles reside
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listCatalogRolesForPrincipalRole
      description: Get the catalog roles mapped to the principal role
      responses:
        '200':
          description: The list of catalog roles mapped to the principal role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_CatalogRoles'
        '403':
          description: The caller does not have permission to list catalog roles
        '404':
          description: The principal role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: assignCatalogRoleToPrincipalRole
      description: Assign a catalog role to a principal role
      requestBody:
        description: The principal to create
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_GrantCatalogRoleRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: The caller does not have permission to assign a catalog role
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /principal-roles/{principalRoleName}/catalog-roles/{catalogName}/{catalogRoleName}:
    parameters:
      - name: principalRoleName
        in: path
        description: The principal role name
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogName
        in: path
        description: The name of the catalog that contains the role to revoke
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogRoleName
        in: path
        description: The name of the catalog role that should be revoked
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    delete:
      operationId: revokeCatalogRoleFromPrincipalRole
      description: Remove a catalog role from a principal role
      responses:
        '204':
          description: Success, no content
        '403':
          description: The caller does not have permission to revoke a catalog role
        '404':
          description: The principal role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /catalogs/{catalogName}/catalog-roles:
    parameters:
      - name: catalogName
        in: path
        description: The catalog for which we are reading/updating roles
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listCatalogRoles
      description: List existing roles in the catalog
      responses:
        '200':
          description: The list of roles that exist in this catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_CatalogRoles'
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    post:
      operationId: createCatalogRole
      description: Create a new role in the catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_CreateCatalogRoleRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: The principal is not authorized to create roles
        '404':
          description: The catalog does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /catalogs/{catalogName}/catalog-roles/{catalogRoleName}:
    parameters:
      - name: catalogName
        in: path
        description: The catalog for which we are retrieving roles
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogRoleName
        in: path
        description: The name of the role
        required: true
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: getCatalogRole
      description: Get the details of an existing role
      responses:
        '200':
          description: The specified role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_CatalogRole'
        '403':
          description: The principal is not authorized to read role data
        '404':
          description: The catalog or the role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: updateCatalogRole
      description: Update an existing role in the catalog
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_UpdateCatalogRoleRequest
      responses:
        '200':
          description: The specified role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_CatalogRole'
        '403':
          description: The principal is not authorized to update roles
        '404':
          description: The catalog or the role does not exist
        '409':
          description: >-
            The entity version doesn't match the currentEntityVersion; retry
            after fetching latest version
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    delete:
      operationId: deleteCatalogRole
      description: >-
        Delete an existing role from the catalog. All associated grants will
        also be deleted
      responses:
        '204':
          description: Success, no content
        '403':
          description: The principal is not authorized to delete roles
        '404':
          description: The catalog or the role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /catalogs/{catalogName}/catalog-roles/{catalogRoleName}/principal-roles:
    parameters:
      - name: catalogName
        in: path
        required: true
        description: The name of the catalog where the catalog role resides
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogRoleName
        in: path
        required: true
        description: The name of the catalog role
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listAssigneePrincipalRolesForCatalogRole
      description: >-
        List the PrincipalRoles to which the target catalog role has been
        assigned
      responses:
        '200':
          description: >-
            List the PrincipalRoles to which the target catalog role has been
            assigned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRoles'
        '403':
          description: The caller does not have permission to list principal roles
        '404':
          description: The catalog or catalog role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /catalogs/{catalogName}/catalog-roles/{catalogRoleName}/grants:
    parameters:
      - name: catalogName
        in: path
        required: true
        description: The name of the catalog where the role will receive the grant
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
      - name: catalogRoleName
        in: path
        required: true
        description: The name of the role receiving the grant (must exist)
        schema:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
    get:
      operationId: listGrantsForCatalogRole
      description: List the grants the catalog role holds
      responses:
        '200':
          description: List of all grants given to the role in this catalog
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polaris_Management_Service_GrantResources'
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    put:
      operationId: addGrantToCatalogRole
      description: Add a new grant to the catalog role
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Polaris_Management_Service_AddGrantRequest'
      responses:
        '201':
          description: Successful response
        '403':
          description: The principal is not authorized to create grants
        '404':
          description: The catalog or the role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
    post:
      operationId: revokeGrantFromCatalogRole
      description: >-
        Delete a specific grant from the role. This may be a subset or a
        superset of the grants the role has. In case of a subset, the role will
        retain the grants not specified. If the `cascade` parameter is true,
        grant revocation will have a cascading effect - that is, if a principal
        has specific grants on a subresource, and grants are revoked on a parent
        resource, the grants present on the subresource will be revoked as well.
        By default, this behavior is disabled and grant revocation only affects
        the specified resource.
      parameters:
        - name: cascade
          in: query
          schema:
            type: boolean
            default: false
          description: If true, the grant revocation cascades to all subresources.
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_RevokeGrantRequest
      responses:
        '201':
          description: Successful response
        '403':
          description: The principal is not authorized to create grants
        '404':
          description: The catalog or the role does not exist
      tags:
        - polaris-management-service_other
      security:
        - Polaris_Management_Service_OAuth2: []
  /v1/config:
    get:
      tags:
        - Configuration API
      summary: List all catalog configuration settings
      operationId: getConfig
      parameters:
        - name: warehouse
          in: query
          required: false
          schema:
            type: string
          description: Warehouse location or identifier to request from the service
      description: >2-
         All REST clients should first call this route to get catalog configuration properties from the server to configure the catalog and its HTTP client. Configuration from the server consists of two sets of key/value pairs.
        - defaults -  properties that should be used as default configuration;
        applied before client configuration

        - overrides - properties that should be used to override client
        configuration; applied after defaults and client configuration


        Catalog configuration is constructed by setting the defaults, then
        client- provided configuration, and finally overrides. The final
        property set is then used to configure the catalog.


        For example, a default configuration property might set the size of the
        client pool, which can be replaced with a client-specific setting. An
        override might be used to set the warehouse location, which is stored on
        the server rather than in client configuration.


        Common catalog configuration settings are documented at
        https://iceberg.apache.org/docs/latest/configuration/#catalog-properties 
      responses:
        '200':
          description: Server specified configuration values.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_CatalogConfig
              example:
                overrides:
                  warehouse: s3://bucket/warehouse/
                defaults:
                  clients: '4'
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/oauth/tokens:
    post:
      tags:
        - OAuth2 API
      summary: Get a token using an OAuth2 flow
      operationId: getToken
      description: >-
        Exchange credentials for a token using the OAuth2 client credentials
        flow or token exchange.


        This endpoint is used for three purposes -

        1. To exchange client credentials (client ID and secret) for an access
        token This uses the client credentials flow.

        2. To exchange a client token and an identity token for a more specific
        access token This uses the token exchange flow.

        3. To exchange an access token for one with the same claims and a
        refreshed expiration period This uses the token exchange flow.


        For example, a catalog client may be configured with client credentials
        from the OAuth2 Authorization flow. This client would exchange its
        client ID and secret for an access token using the client credentials
        request with this endpoint (1). Subsequent requests would then use that
        access token.


        Some clients may also handle sessions that have additional user context.
        These clients would use the token exchange flow to exchange a user token
        (the "subject" token) from the session for a more specific access token
        for that user, using the catalog's access token as the "actor" token
        (2). The user ID token is the "subject" token and can be any token type
        allowed by the OAuth2 token exchange flow, including a unsecured JWT
        token with a sub claim. This request should use the catalog's bearer
        token in the "Authorization" header.


        Clients may also use the token exchange flow to refresh a token that is
        about to expire by sending a token exchange request (3). The request's
        "subject" token should be the expiring token. This request should use
        the subject token in the "Authorization" header.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_OAuthTokenRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_OAuthTokenResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_OAuthErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_OAuthErrorResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_OAuthErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
    get:
      tags:
        - Catalog API
      summary: >-
        List namespaces, optionally providing a parent namespace to list
        underneath
      description: >-
        List all namespaces at a certain level, optionally starting from a given
        parent namespace. If table accounting.tax.paid.info exists, using
        'SELECT NAMESPACE IN accounting' would translate into `GET
        /namespaces?parent=accounting` and must return a namespace,
        ["accounting", "tax"] only. Using 'SELECT NAMESPACE IN accounting.tax'
        would translate into `GET /namespaces?parent=accounting%1Ftax` and must
        return a namespace, ["accounting", "tax", "paid"]. If `parent` is not
        provided, all top-level namespaces should be listed.
      operationId: listNamespaces
      parameters:
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-token'
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-size'
        - name: parent
          in: query
          description: >-
            An optional namespace, underneath which to list namespaces. If not
            provided or empty, all top-level namespaces should be listed. If
            parent is a multipart namespace, the parts must be separated by the
            unit separator (`0x1F`) byte.
          required: false
          allowEmptyValue: true
          schema:
            type: string
          example: accounting%1Ftax
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ListNamespacesResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: >-
            Not Found - Namespace provided in the `parent` query parameter is
            not found.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NoSuchNamespaceExample:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    post:
      tags:
        - Catalog API
      summary: Create a namespace
      description: >-
        Create a namespace, with an optional set of properties. The server might
        also add properties, such as `last_modified_time` etc.
      operationId: createNamespace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CreateNamespaceRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_CreateNamespaceResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '406':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnsupportedOperationResponse
        '409':
          description: Conflict - The namespace already exists
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceAlreadyExists:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NamespaceAlreadyExistsError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
    get:
      tags:
        - Catalog API
      summary: Load the metadata properties for a namespace
      operationId: loadNamespaceMetadata
      description: Return all stored metadata properties for a given namespace
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_GetNamespaceResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - Namespace not found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NoSuchNamespaceExample:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    head:
      tags:
        - Catalog API
      summary: Check if a namespace exists
      operationId: namespaceExists
      description: Check if a namespace exists. The response does not contain a body.
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - Namespace not found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NoSuchNamespaceExample:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    delete:
      tags:
        - Catalog API
      summary: Drop a namespace from the catalog. Namespace must be empty.
      operationId: dropNamespace
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - Namespace to delete does not exist.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NoSuchNamespaceExample:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/properties:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
    post:
      tags:
        - Catalog API
      summary: Set or remove properties on a namespace
      operationId: updateProperties
      description: >-
        Set and/or remove properties on a namespace. The request body specifies
        a list of properties to remove and a map of key value pairs to update.

        Properties that are not in the request are not modified or removed by
        this call.

        Server implementations are not required to support namespace properties.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesRequest
            examples:
              UpdateAndRemoveProperties:
                $ref: >-
                  #/components/examples/Apache_Iceberg_REST_Catalog_API_UpdateAndRemoveNamespacePropertiesRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - Namespace not found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '406':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnsupportedOperationResponse
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '422':
          description: >-
            Unprocessable Entity - A property key was included in both
            `removals` and `updates`
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                UnprocessableEntityDuplicateKey:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_UnprocessableEntityDuplicateKey
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/tables:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
    get:
      tags:
        - Catalog API
      summary: List all table identifiers underneath a given namespace
      description: Return all table identifiers under this namespace
      operationId: listTables
      parameters:
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-token'
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-size'
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ListTablesResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    post:
      tags:
        - Catalog API
      summary: Create a table in the given namespace
      description: >-
        Create a table or start a create transaction, like atomic CTAS.


        If `stage-create` is false, the table is created immediately.


        If `stage-create` is true, the table is not created, but table metadata
        is initialized and returned. The service should prepare as needed for a
        commit to the table commit endpoint to complete the create transaction.
        The client uses the returned metadata to begin a transaction. To commit
        the transaction, the client sends all create and subsequent changes to
        the table commit route. Changes from the table create operation include
        changes like AddSchemaUpdate and SetCurrentSchemaUpdate that set the
        initial table state.
      operationId: createTable
      parameters:
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_data-access'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CreateTableRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_CreateTableResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '409':
          description: Conflict - The table already exists
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceAlreadyExists:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_TableAlreadyExistsError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/register:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
    post:
      tags:
        - Catalog API
      summary: >-
        Register a table in the given namespace using given metadata file
        location
      description: Register a table using given metadata file location.
      operationId: registerTable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_RegisterTableRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_LoadTableResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '409':
          description: Conflict - The table already exists
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                NamespaceAlreadyExists:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_TableAlreadyExistsError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/tables/{table}:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_table'
    get:
      tags:
        - Catalog API
      summary: Load a table from the catalog
      operationId: loadTable
      description: >-
        Load a table from the catalog.


        The response contains both configuration and table metadata. The
        configuration, if non-empty is used as additional configuration for the
        table that overrides catalog configuration. For example, this
        configuration may change the FileIO implementation to be used for the
        table.


        The response also contains the table's full metadata, matching the table
        metadata JSON file.


        The catalog configuration may contain credentials that should be used
        for subsequent requests for the table. The configuration key "token" is
        used to pass an access token to be used as a bearer token for table
        requests. Otherwise, a token may be passed using a RFC 8693 token type
        as a configuration key. For example,
        "urn:ietf:params:oauth:token-type:jwt=<JWT-token>".
      parameters:
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_data-access'
        - in: query
          name: snapshots
          description: >-
            The snapshots to return in the body of the metadata. Setting the
            value to `all` would return the full set of snapshots currently
            valid for the table. Setting the value to `refs` would load all
            snapshots referenced by branches or tags.

            Default if no param is provided is `all`.
          required: false
          schema:
            type: string
            enum:
              - all
              - refs
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_LoadTableResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, table to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToLoadDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    post:
      tags:
        - Catalog API
      summary: Commit updates to a table
      operationId: updateTable
      description: >-
        Commit updates to a table.


        Commits have two parts, requirements and updates. Requirements are
        assertions that will be validated before attempting to make and commit
        changes. For example, `assert-ref-snapshot-id` will check that a named
        ref's snapshot ID has a certain value.


        Updates are changes to make to table metadata. For example, after
        asserting that the current main ref is at the expected snapshot, a
        commit may add a new child snapshot and set the ref to the new snapshot
        id.


        Create table transactions that are started by createTable with
        `stage-create` set to true are committed using this route. Transactions
        should include all changes to the table, including table initialization,
        like AddSchemaUpdate and SetCurrentSchemaUpdate. The `assert-create`
        requirement is used to ensure that the table was not created
        concurrently.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitTableRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_CommitTableResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, table to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToUpdateDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '409':
          description: >-
            Conflict - CommitFailedException, one or more requirements failed.
            The client may retry.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '500':
          description: >-
            An unknown server-side problem occurred; the commit state is
            unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
        '502':
          description: >-
            A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        '504':
          description: A server-side gateway timeout occurred; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
        5XX:
          description: A server-side problem that might not be addressable on the client.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    delete:
      tags:
        - Catalog API
      summary: Drop a table from the catalog
      operationId: dropTable
      description: Remove a table from the catalog
      parameters:
        - name: purgeRequested
          in: query
          required: false
          description: >-
            Whether the user requested to purge the underlying table's data and
            metadata
          schema:
            type: boolean
            default: false
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, Table to drop does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToDeleteDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    head:
      tags:
        - Catalog API
      summary: Check if a table exists
      operationId: tableExists
      description: >-
        Check if a table exists within a given namespace. The response does not
        contain a body.
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, Table not found
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToLoadDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/tables/rename:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
    post:
      tags:
        - Catalog API
      summary: Rename a table from its current name to a new name
      description: >-
        Rename a table from one identifier to another. It's valid to move a
        table across namespaces, but the server implementation is not required
        to support it.
      operationId: renameTable
      requestBody:
        description: >-
          Current table identifier to rename and new table identifier to rename
          to
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_RenameTableRequest
            examples:
              RenameTableSameNamespace:
                $ref: >-
                  #/components/examples/Apache_Iceberg_REST_Catalog_API_RenameTableSameNamespace
        required: true
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: >-
            Not Found - NoSuchTableException, Table to rename does not exist -
            NoSuchNamespaceException, The target namespace of the new table
            identifier does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToRenameDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
                NamespaceToRenameToDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '406':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnsupportedOperationResponse
        '409':
          description: >-
            Conflict - The target identifier to rename to already exists as a
            table or view
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                summary: The requested table identifier already exists
                value:
                  error:
                    message: The given table already exists
                    type: AlreadyExistsException
                    code: 409
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/tables/{table}/metrics:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_table'
    post:
      tags:
        - Catalog API
      summary: Send a metrics report to this endpoint to be processed by the backend
      operationId: reportMetrics
      requestBody:
        description: The request containing the metrics report to be sent
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_ReportMetricsRequest
        required: true
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, table to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToLoadDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/tables/{table}/notifications:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_table'
    post:
      tags:
        - Catalog API
      summary: Sends a notification to the table
      operationId: sendNotification
      requestBody:
        description: The request containing the notification to be sent
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_NotificationRequest
        required: true
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, table to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToLoadDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/transactions/commit:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
    post:
      tags:
        - Catalog API
      summary: Commit updates to multiple tables in an atomic operation
      operationId: commitTransaction
      requestBody:
        description: >-
          Commit updates to multiple tables in an atomic operation


          A commit for a single table consists of a table identifier with
          requirements and updates. Requirements are assertions that will be
          validated before attempting to make and commit changes. For example,
          `assert-ref-snapshot-id` will check that a named ref's snapshot ID has
          a certain value.


          Updates are changes to make to table metadata. For example, after
          asserting that the current main ref is at the expected snapshot, a
          commit may add a new child snapshot and set the ref to the new
          snapshot id.
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitTransactionRequest
        required: true
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchTableException, table to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              examples:
                TableToUpdateDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchTableError
        '409':
          description: >-
            Conflict - CommitFailedException, one or more requirements failed.
            The client may retry.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '500':
          description: >-
            An unknown server-side problem occurred; the commit state is
            unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
        '502':
          description: >-
            A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        '504':
          description: A server-side gateway timeout occurred; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
        5XX:
          description: A server-side problem that might not be addressable on the client.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/views:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
    get:
      tags:
        - Catalog API
      summary: List all view identifiers underneath a given namespace
      description: Return all view identifiers under this namespace
      operationId: listViews
      parameters:
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-token'
        - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_page-size'
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ListTablesResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    post:
      tags:
        - Catalog API
      summary: Create a view in the given namespace
      description: Create a view in the given namespace.
      operationId: createView
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CreateViewRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_LoadViewResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - The namespace specified does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                NamespaceNotFound:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '409':
          description: Conflict - The view already exists
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                NamespaceAlreadyExists:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_ViewAlreadyExistsError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/namespaces/{namespace}/views/{view}:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_namespace'
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_view'
    get:
      tags:
        - Catalog API
      summary: Load a view from the catalog
      operationId: loadView
      description: >-
        Load a view from the catalog.


        The response contains both configuration and view metadata. The
        configuration, if non-empty is used as additional configuration for the
        view that overrides catalog configuration.


        The response also contains the view's full metadata, matching the view
        metadata JSON file.


        The catalog configuration may contain credentials that should be used
        for subsequent requests for the view. The configuration key "token" is
        used to pass an access token to be used as a bearer token for view
        requests. Otherwise, a token may be passed using a RFC 8693 token type
        as a configuration key. For example,
        "urn:ietf:params:oauth:token-type:jwt=<JWT-token>".
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_LoadViewResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchViewException, view to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                ViewToLoadDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchViewError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    post:
      tags:
        - Catalog API
      summary: Replace a view
      operationId: replaceView
      description: Commit updates to a view.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitViewRequest
      responses:
        '200':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_LoadViewResponse
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchViewException, view to load does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                ViewToUpdateDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchViewError
        '409':
          description: Conflict - CommitFailedException. The client may retry.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '500':
          description: >-
            An unknown server-side problem occurred; the commit state is
            unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              example:
                error:
                  message: Internal Server Error
                  type: CommitStateUnknownException
                  code: 500
        '502':
          description: >-
            A gateway or proxy received an invalid response from the upstream
            server; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              example:
                error:
                  message: Invalid response from the upstream server
                  type: CommitStateUnknownException
                  code: 502
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        '504':
          description: A server-side gateway timeout occurred; the commit state is unknown.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              example:
                error:
                  message: Gateway timed out during commit
                  type: CommitStateUnknownException
                  code: 504
        5XX:
          description: A server-side problem that might not be addressable on the client.
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              example:
                error:
                  message: Bad Gateway
                  type: InternalServerError
                  code: 502
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    delete:
      tags:
        - Catalog API
      summary: Drop a view from the catalog
      operationId: dropView
      description: Remove a view from the catalog
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: Not Found - NoSuchViewException, view to drop does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                ViewToDeleteDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchViewError
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
    head:
      tags:
        - Catalog API
      summary: Check if a view exists
      operationId: viewExists
      description: >-
        Check if a view exists within a given namespace. This request does not
        return a response body.
      responses:
        '204':
          description: Success, no content
        '400':
          description: Bad Request
        '401':
          description: Unauthorized
        '404':
          description: Not Found
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
  /v1/{prefix}/views/rename:
    parameters:
      - $ref: '#/components/parameters/Apache_Iceberg_REST_Catalog_API_prefix'
    post:
      tags:
        - Catalog API
      summary: Rename a view from its current name to a new name
      description: >-
        Rename a view from one identifier to another. It's valid to move a view
        across namespaces, but the server implementation is not required to
        support it.
      operationId: renameView
      requestBody:
        description: Current view identifier to rename and new view identifier to rename to
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_RenameTableRequest
            examples:
              RenameViewSameNamespace:
                $ref: >-
                  #/components/examples/Apache_Iceberg_REST_Catalog_API_RenameViewSameNamespace
        required: true
      responses:
        '204':
          description: Success, no content
        '400':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse
        '401':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse
        '403':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ForbiddenResponse
        '404':
          description: >-
            Not Found - NoSuchViewException, view to rename does not exist -
            NoSuchNamespaceException, The target namespace of the new identifier
            does not exist
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              examples:
                ViewToRenameDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchViewError
                NamespaceToRenameToDoesNotExist:
                  $ref: >-
                    #/components/examples/Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError
        '406':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_UnsupportedOperationResponse
        '409':
          description: >-
            Conflict - The target identifier to rename to already exists as a
            table or view
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel
              example:
                summary: The requested view identifier already exists
                value:
                  error:
                    message: The given view already exists
                    type: AlreadyExistsException
                    code: 409
        '419':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse
        '503':
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse
        5XX:
          $ref: >-
            #/components/responses/Apache_Iceberg_REST_Catalog_API_ServerErrorResponse
      security:
        - Apache_Iceberg_REST_Catalog_API_OAuth2:
            - catalog
        - Apache_Iceberg_REST_Catalog_API_BearerAuth: []
components:
  securitySchemes:
    Polaris_Management_Service_OAuth2:
      type: oauth2
      description: Uses OAuth 2 with client credentials flow
      flows:
        implicit:
          authorizationUrl: '{scheme}://{host}/api/v1/oauth/tokens'
          scopes: {}
    Apache_Iceberg_REST_Catalog_API_OAuth2:
      type: oauth2
      description: >-
        This scheme is used for OAuth2 authorization.


        For unauthorized requests, services should return an appropriate 401 or
        403 response. Implementations must not return altered success (200)
        responses when a request is unauthenticated or unauthorized.

        If a separate authorization server is used, substitute the tokenUrl with
        the full token path of the external authorization server, and use the
        resulting token to access the resources defined in the spec.
      flows:
        clientCredentials:
          tokenUrl: /v1/oauth/tokens
          scopes:
            catalog: Allows interacting with the Config and Catalog APIs
    Apache_Iceberg_REST_Catalog_API_BearerAuth:
      type: http
      scheme: bearer
  schemas:
    Polaris_Management_Service_Catalogs:
      type: object
      description: A list of Catalog objects
      properties:
        catalogs:
          type: array
          items:
            $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
      required:
        - catalogs
    Polaris_Management_Service_CreateCatalogRequest:
      type: object
      description: Request to create a new catalog
      properties:
        catalog:
          $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
      required:
        - catalog
    Polaris_Management_Service_Catalog:
      type: object
      description: >-
        A catalog object. A catalog may be internal or external. Internal
        catalogs are managed entirely by an external catalog interface. Third
        party catalogs may be other Iceberg REST implementations or other
        services with their own proprietary APIs
      properties:
        type:
          type: string
          enum:
            - INTERNAL
            - EXTERNAL
          description: the type of catalog - internal or external
          default: INTERNAL
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
          description: The name of the catalog
        properties:
          type: object
          properties:
            default-base-location:
              type: string
          additionalProperties:
            type: string
          required:
            - default-base-location
        createTimestamp:
          type: integer
          format: int64
          description: >-
            The creation time represented as unix epoch timestamp in
            milliseconds
        lastUpdateTimestamp:
          type: integer
          format: int64
          description: >-
            The last update time represented as unix epoch timestamp in
            milliseconds
        entityVersion:
          type: integer
          description: >-
            The version of the catalog object used to determine if the catalog
            metadata has changed
        storageConfigInfo:
          $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
      required:
        - name
        - type
        - storageConfigInfo
        - properties
      discriminator:
        propertyName: type
        mapping:
          INTERNAL: '#/components/schemas/Polaris_Management_Service_PolarisCatalog'
          EXTERNAL: '#/components/schemas/Polaris_Management_Service_ExternalCatalog'
    Polaris_Management_Service_PolarisCatalog:
      type: object
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
      description: >-
        The base catalog type - this contains all the fields necessary to
        construct an INTERNAL catalog
    Polaris_Management_Service_ExternalCatalog:
      description: An externally managed catalog
      type: object
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_Catalog'
        - type: object
          properties:
            remoteUrl:
              type: string
              description: URL to the remote catalog API
    Polaris_Management_Service_StorageConfigInfo:
      type: object
      description: A storage configuration used by catalogs
      properties:
        storageType:
          type: string
          enum:
            - S3
            - GCS
            - AZURE
            - FILE
          description: >-
            The cloud provider type this storage is built on. FILE is supported
            for testing purposes only
        allowedLocations:
          type: array
          items:
            type: string
          example: >-
            For AWS [s3://bucketname/prefix/], for AZURE
            [abfss://container@storageaccount.blob.core.windows.net/prefix/],
            for GCP [gs://bucketname/prefix/]
      required:
        - storageType
      discriminator:
        propertyName: storageType
        mapping:
          S3: '#/components/schemas/Polaris_Management_Service_AwsStorageConfigInfo'
          AZURE: >-
            #/components/schemas/Polaris_Management_Service_AzureStorageConfigInfo
          GCS: '#/components/schemas/Polaris_Management_Service_GcpStorageConfigInfo'
          FILE: >-
            #/components/schemas/Polaris_Management_Service_FileStorageConfigInfo
    Polaris_Management_Service_AwsStorageConfigInfo:
      type: object
      description: aws storage configuration info
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
      properties:
        roleArn:
          type: string
          description: the aws role arn that grants privileges on the S3 buckets
          example: arn:aws:iam::123456789001:principal/abc1-b-self1234
        externalId:
          type: string
          description: >-
            an optional external id used to establish a trust relationship with
            AWS in the trust policy
        userArn:
          type: string
          description: the aws user arn used to assume the aws role
          example: arn:aws:iam::123456789001:user/abc1-b-self1234
      required:
        - roleArn
    Polaris_Management_Service_AzureStorageConfigInfo:
      type: object
      description: azure storage configuration info
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
      properties:
        tenantId:
          type: string
          description: the tenant id that the storage accounts belong to
        multiTenantAppName:
          type: string
          description: the name of the azure client application
        consentUrl:
          type: string
          description: URL to the Azure permissions request page
      required:
        - tenantId
    Polaris_Management_Service_GcpStorageConfigInfo:
      type: object
      description: gcp storage configuration info
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
      properties:
        gcsServiceAccount:
          type: string
          description: a Google cloud storage service account
    Polaris_Management_Service_FileStorageConfigInfo:
      type: object
      description: gcp storage configuration info
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
    Polaris_Management_Service_UpdateCatalogRequest:
      description: Updates to apply to a Catalog
      type: object
      properties:
        currentEntityVersion:
          type: integer
          description: >-
            The version of the object onto which this update is applied; if the
            object changed, the update will fail and the caller should retry
            after fetching the latest version.
        properties:
          type: object
          additionalProperties:
            type: string
        storageConfigInfo:
          $ref: '#/components/schemas/Polaris_Management_Service_StorageConfigInfo'
    Polaris_Management_Service_Principals:
      description: A list of Principals
      type: object
      properties:
        principals:
          type: array
          items:
            $ref: '#/components/schemas/Polaris_Management_Service_Principal'
      required:
        - principals
    Polaris_Management_Service_PrincipalWithCredentials:
      description: >-
        A user with its client id and secret. This type is returned when a new
        principal is created or when its credentials are rotated
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/Polaris_Management_Service_Principal'
        credentials:
          type: object
          properties:
            clientId:
              type: string
            clientSecret:
              type: string
      required:
        - principal
        - credentials
    Polaris_Management_Service_CreatePrincipalRequest:
      type: object
      properties:
        principal:
          $ref: '#/components/schemas/Polaris_Management_Service_Principal'
        credentialRotationRequired:
          type: boolean
          description: >-
            If true, the initial credentials can only be used to call
            rotateCredentials
    Polaris_Management_Service_Principal:
      description: A Polaris principal.
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
        clientId:
          type: string
          description: >-
            The output-only OAuth clientId associated with this principal if
            applicable
        properties:
          type: object
          additionalProperties:
            type: string
        createTimestamp:
          type: integer
          format: int64
        lastUpdateTimestamp:
          type: integer
          format: int64
        entityVersion:
          type: integer
          description: >-
            The version of the principal object used to determine if the
            principal metadata has changed
      required:
        - name
    Polaris_Management_Service_UpdatePrincipalRequest:
      description: Updates to apply to a Principal
      type: object
      properties:
        currentEntityVersion:
          type: integer
          description: >-
            The version of the object onto which this update is applied; if the
            object changed, the update will fail and the caller should retry
            after fetching the latest version.
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - currentEntityVersion
        - properties
    Polaris_Management_Service_PrincipalRoles:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRole'
      required:
        - roles
    Polaris_Management_Service_GrantPrincipalRoleRequest:
      type: object
      properties:
        principalRole:
          $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRole'
    Polaris_Management_Service_CreatePrincipalRoleRequest:
      type: object
      properties:
        principalRole:
          $ref: '#/components/schemas/Polaris_Management_Service_PrincipalRole'
    Polaris_Management_Service_PrincipalRole:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
          description: The name of the role
        properties:
          type: object
          additionalProperties:
            type: string
        createTimestamp:
          type: integer
          format: int64
        lastUpdateTimestamp:
          type: integer
          format: int64
        entityVersion:
          type: integer
          description: >-
            The version of the principal role object used to determine if the
            principal role metadata has changed
      required:
        - name
    Polaris_Management_Service_UpdatePrincipalRoleRequest:
      description: Updates to apply to a Principal Role
      type: object
      properties:
        currentEntityVersion:
          type: integer
          description: >-
            The version of the object onto which this update is applied; if the
            object changed, the update will fail and the caller should retry
            after fetching the latest version.
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - currentEntityVersion
        - properties
    Polaris_Management_Service_CatalogRoles:
      type: object
      properties:
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Polaris_Management_Service_CatalogRole'
          description: The list of catalog roles
      required:
        - roles
    Polaris_Management_Service_GrantCatalogRoleRequest:
      type: object
      properties:
        catalogRole:
          $ref: '#/components/schemas/Polaris_Management_Service_CatalogRole'
    Polaris_Management_Service_CreateCatalogRoleRequest:
      type: object
      properties:
        catalogRole:
          $ref: '#/components/schemas/Polaris_Management_Service_CatalogRole'
    Polaris_Management_Service_CatalogRole:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 256
          pattern: ^(?!\s*[s|S][y|Y][s|S][t|T][e|E][m|M]\$).*$
          description: The name of the role
        properties:
          type: object
          additionalProperties:
            type: string
        createTimestamp:
          type: integer
          format: int64
        lastUpdateTimestamp:
          type: integer
          format: int64
        entityVersion:
          type: integer
          description: >-
            The version of the catalog role object used to determine if the
            catalog role metadata has changed
      required:
        - name
    Polaris_Management_Service_UpdateCatalogRoleRequest:
      description: Updates to apply to a Catalog Role
      type: object
      properties:
        currentEntityVersion:
          type: integer
          description: >-
            The version of the object onto which this update is applied; if the
            object changed, the update will fail and the caller should retry
            after fetching the latest version.
        properties:
          type: object
          additionalProperties:
            type: string
      required:
        - currentEntityVersion
        - properties
    Polaris_Management_Service_ViewPrivilege:
      type: string
      enum:
        - CATALOG_MANAGE_ACCESS
        - VIEW_CREATE
        - VIEW_DROP
        - VIEW_LIST
        - VIEW_READ_PROPERTIES
        - VIEW_WRITE_PROPERTIES
        - VIEW_FULL_METADATA
    Polaris_Management_Service_TablePrivilege:
      type: string
      enum:
        - CATALOG_MANAGE_ACCESS
        - TABLE_DROP
        - TABLE_LIST
        - TABLE_READ_PROPERTIES
        - VIEW_READ_PROPERTIES
        - TABLE_WRITE_PROPERTIES
        - TABLE_READ_DATA
        - TABLE_WRITE_DATA
        - TABLE_FULL_METADATA
    Polaris_Management_Service_NamespacePrivilege:
      type: string
      enum:
        - CATALOG_MANAGE_ACCESS
        - CATALOG_MANAGE_CONTENT
        - CATALOG_MANAGE_METADATA
        - NAMESPACE_CREATE
        - TABLE_CREATE
        - VIEW_CREATE
        - NAMESPACE_DROP
        - TABLE_DROP
        - VIEW_DROP
        - NAMESPACE_LIST
        - TABLE_LIST
        - VIEW_LIST
        - NAMESPACE_READ_PROPERTIES
        - TABLE_READ_PROPERTIES
        - VIEW_READ_PROPERTIES
        - NAMESPACE_WRITE_PROPERTIES
        - TABLE_WRITE_PROPERTIES
        - VIEW_WRITE_PROPERTIES
        - TABLE_READ_DATA
        - TABLE_WRITE_DATA
        - NAMESPACE_FULL_METADATA
        - TABLE_FULL_METADATA
        - VIEW_FULL_METADATA
    Polaris_Management_Service_CatalogPrivilege:
      type: string
      enum:
        - CATALOG_MANAGE_ACCESS
        - CATALOG_MANAGE_CONTENT
        - CATALOG_MANAGE_METADATA
        - CATALOG_READ_PROPERTIES
        - CATALOG_WRITE_PROPERTIES
        - NAMESPACE_CREATE
        - TABLE_CREATE
        - VIEW_CREATE
        - NAMESPACE_DROP
        - TABLE_DROP
        - VIEW_DROP
        - NAMESPACE_LIST
        - TABLE_LIST
        - VIEW_LIST
        - NAMESPACE_READ_PROPERTIES
        - TABLE_READ_PROPERTIES
        - VIEW_READ_PROPERTIES
        - NAMESPACE_WRITE_PROPERTIES
        - TABLE_WRITE_PROPERTIES
        - VIEW_WRITE_PROPERTIES
        - TABLE_READ_DATA
        - TABLE_WRITE_DATA
        - NAMESPACE_FULL_METADATA
        - TABLE_FULL_METADATA
        - VIEW_FULL_METADATA
    Polaris_Management_Service_AddGrantRequest:
      type: object
      properties:
        grant:
          $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
    Polaris_Management_Service_RevokeGrantRequest:
      type: object
      properties:
        grant:
          $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
    Polaris_Management_Service_ViewGrant:
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
        - type: object
          properties:
            namespace:
              type: array
              items:
                type: string
            viewName:
              type: string
              minLength: 1
              maxLength: 256
            privilege:
              $ref: '#/components/schemas/Polaris_Management_Service_ViewPrivilege'
          required:
            - namespace
            - viewName
            - privilege
    Polaris_Management_Service_TableGrant:
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
        - type: object
          properties:
            namespace:
              type: array
              items:
                type: string
            tableName:
              type: string
              minLength: 1
              maxLength: 256
            privilege:
              $ref: '#/components/schemas/Polaris_Management_Service_TablePrivilege'
          required:
            - namespace
            - tableName
            - privilege
    Polaris_Management_Service_NamespaceGrant:
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
        - type: object
          properties:
            namespace:
              type: array
              items:
                type: string
            privilege:
              $ref: >-
                #/components/schemas/Polaris_Management_Service_NamespacePrivilege
          required:
            - namespace
            - privilege
    Polaris_Management_Service_CatalogGrant:
      allOf:
        - $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
        - type: object
          properties:
            privilege:
              $ref: '#/components/schemas/Polaris_Management_Service_CatalogPrivilege'
          required:
            - privilege
    Polaris_Management_Service_GrantResource:
      type: object
      discriminator:
        propertyName: type
        mapping:
          catalog: '#/components/schemas/Polaris_Management_Service_CatalogGrant'
          namespace: '#/components/schemas/Polaris_Management_Service_NamespaceGrant'
          table: '#/components/schemas/Polaris_Management_Service_TableGrant'
          view: '#/components/schemas/Polaris_Management_Service_ViewGrant'
      properties:
        type:
          type: string
          enum:
            - catalog
            - namespace
            - table
            - view
      required:
        - type
    Polaris_Management_Service_GrantResources:
      type: object
      properties:
        grants:
          type: array
          items:
            $ref: '#/components/schemas/Polaris_Management_Service_GrantResource'
      required:
        - grants
    Apache_Iceberg_REST_Catalog_API_ErrorModel:
      type: object
      description: >-
        JSON error payload returned in a response with further details on the
        error
      required:
        - message
        - type
        - code
      properties:
        message:
          type: string
          description: Human-readable error message
        type:
          type: string
          description: Internal type definition of the error
          example: NoSuchNamespaceException
        code:
          type: integer
          minimum: 400
          maximum: 600
          description: HTTP response code
          example: 404
        stack:
          type: array
          items:
            type: string
    Apache_Iceberg_REST_Catalog_API_CatalogConfig:
      type: object
      description: Server-provided configuration for the catalog.
      required:
        - defaults
        - overrides
      properties:
        overrides:
          type: object
          additionalProperties:
            type: string
          description: >-
            Properties that should be used to override client configuration;
            applied after defaults and client configuration.
        defaults:
          type: object
          additionalProperties:
            type: string
          description: >-
            Properties that should be used as default configuration; applied
            before client configuration.
    Apache_Iceberg_REST_Catalog_API_CreateNamespaceRequest:
      type: object
      required:
        - namespace
      properties:
        namespace:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
        properties:
          type: object
          description: Configured string to string map of properties for the namespace
          example:
            owner: Hank Bendickson
          default: {}
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesRequest:
      type: object
      properties:
        removals:
          type: array
          uniqueItems: true
          items:
            type: string
          example:
            - department
            - access_group
        updates:
          type: object
          example:
            owner: Hank Bendickson
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_RenameTableRequest:
      type: object
      required:
        - source
        - destination
      properties:
        source:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableIdentifier'
        destination:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableIdentifier'
    Apache_Iceberg_REST_Catalog_API_Namespace:
      description: Reference to one or more levels of a namespace
      type: array
      items:
        type: string
      example:
        - accounting
        - tax
    Apache_Iceberg_REST_Catalog_API_PageToken:
      description: >-
        An opaque token that allows clients to make use of pagination for list
        APIs (e.g. ListTables). Clients may initiate the first paginated request
        by sending an empty query parameter `pageToken` to the server.

        Servers that support pagination should identify the `pageToken`
        parameter and return a `next-page-token` in the response if there are
        more results available.  After the initial request, the value of
        `next-page-token` from each response must be used as the `pageToken`
        parameter value for the next request. The server must return `null`
        value for the `next-page-token` in the last response.

        Servers that support pagination must return all results in a single
        response with the value of `next-page-token` set to `null` if the query
        parameter `pageToken` is not set in the request.

        Servers that do not support pagination should ignore the `pageToken`
        parameter and return all results in a single response. The
        `next-page-token` must be omitted from the response.

        Clients must interpret either `null` or missing response value of
        `next-page-token` as the end of the listing results.
      type: string
      nullable: true
    Apache_Iceberg_REST_Catalog_API_TableIdentifier:
      type: object
      required:
        - namespace
        - name
      properties:
        namespace:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
        name:
          type: string
          nullable: false
    Apache_Iceberg_REST_Catalog_API_PrimitiveType:
      type: string
      example:
        - long
        - string
        - fixed[16]
        - decimal(10,2)
    Apache_Iceberg_REST_Catalog_API_StructField:
      type: object
      required:
        - id
        - name
        - type
        - required
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Type'
        required:
          type: boolean
        doc:
          type: string
    Apache_Iceberg_REST_Catalog_API_StructType:
      type: object
      required:
        - type
        - fields
      properties:
        type:
          type: string
          enum:
            - struct
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_StructField'
    Apache_Iceberg_REST_Catalog_API_ListType:
      type: object
      required:
        - type
        - element-id
        - element
        - element-required
      properties:
        type:
          type: string
          enum:
            - list
        element-id:
          type: integer
        element:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Type'
        element-required:
          type: boolean
    Apache_Iceberg_REST_Catalog_API_MapType:
      type: object
      required:
        - type
        - key-id
        - key
        - value-id
        - value
        - value-required
      properties:
        type:
          type: string
          enum:
            - map
        key-id:
          type: integer
        key:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Type'
        value-id:
          type: integer
        value:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Type'
        value-required:
          type: boolean
    Apache_Iceberg_REST_Catalog_API_Type:
      oneOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PrimitiveType'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_StructType'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ListType'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_MapType'
    Apache_Iceberg_REST_Catalog_API_Schema:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_StructType'
        - type: object
          properties:
            schema-id:
              type: integer
              readOnly: true
            identifier-field-ids:
              type: array
              items:
                type: integer
    Apache_Iceberg_REST_Catalog_API_Expression:
      oneOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AndOrExpression'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_NotExpression'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SetExpression'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_LiteralExpression
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_UnaryExpression'
    Apache_Iceberg_REST_Catalog_API_ExpressionType:
      type: string
      example:
        - eq
        - and
        - or
        - not
        - in
        - not-in
        - lt
        - lt-eq
        - gt
        - gt-eq
        - not-eq
        - starts-with
        - not-starts-with
        - is-null
        - not-null
        - is-nan
        - not-nan
    Apache_Iceberg_REST_Catalog_API_AndOrExpression:
      type: object
      required:
        - type
        - left
        - right
      properties:
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ExpressionType'
          enum:
            - and
            - or
        left:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Expression'
        right:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Expression'
    Apache_Iceberg_REST_Catalog_API_NotExpression:
      type: object
      required:
        - type
        - child
      properties:
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ExpressionType'
          enum:
            - not
        child:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Expression'
    Apache_Iceberg_REST_Catalog_API_UnaryExpression:
      type: object
      required:
        - type
        - term
        - value
      properties:
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ExpressionType'
          enum:
            - is-null
            - not-null
            - is-nan
            - not-nan
        term:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Term'
        value:
          type: object
    Apache_Iceberg_REST_Catalog_API_LiteralExpression:
      type: object
      required:
        - type
        - term
        - value
      properties:
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ExpressionType'
          enum:
            - lt
            - lt-eq
            - gt
            - gt-eq
            - eq
            - not-eq
            - starts-with
            - not-starts-with
        term:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Term'
        value:
          type: object
    Apache_Iceberg_REST_Catalog_API_SetExpression:
      type: object
      required:
        - type
        - term
        - values
      properties:
        type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ExpressionType'
          enum:
            - in
            - not-in
        term:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Term'
        values:
          type: array
          items:
            type: object
    Apache_Iceberg_REST_Catalog_API_Term:
      oneOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Reference'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TransformTerm'
    Apache_Iceberg_REST_Catalog_API_Reference:
      type: string
      example:
        - column-name
    Apache_Iceberg_REST_Catalog_API_TransformTerm:
      type: object
      required:
        - type
        - transform
        - term
      properties:
        type:
          type: string
          enum:
            - transform
        transform:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Transform'
        term:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Reference'
    Apache_Iceberg_REST_Catalog_API_Transform:
      type: string
      example:
        - identity
        - year
        - month
        - day
        - hour
        - bucket[256]
        - truncate[16]
    Apache_Iceberg_REST_Catalog_API_PartitionField:
      type: object
      required:
        - source-id
        - transform
        - name
      properties:
        field-id:
          type: integer
        source-id:
          type: integer
        name:
          type: string
        transform:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Transform'
    Apache_Iceberg_REST_Catalog_API_PartitionSpec:
      type: object
      required:
        - fields
      properties:
        spec-id:
          type: integer
          readOnly: true
        fields:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionField
    Apache_Iceberg_REST_Catalog_API_SortDirection:
      type: string
      enum:
        - asc
        - desc
    Apache_Iceberg_REST_Catalog_API_NullOrder:
      type: string
      enum:
        - nulls-first
        - nulls-last
    Apache_Iceberg_REST_Catalog_API_SortField:
      type: object
      required:
        - source-id
        - transform
        - direction
        - null-order
      properties:
        source-id:
          type: integer
        transform:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Transform'
        direction:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SortDirection'
        null-order:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_NullOrder'
    Apache_Iceberg_REST_Catalog_API_SortOrder:
      type: object
      required:
        - order-id
        - fields
      properties:
        order-id:
          type: integer
          readOnly: true
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SortField'
    Apache_Iceberg_REST_Catalog_API_Snapshot:
      type: object
      required:
        - snapshot-id
        - timestamp-ms
        - manifest-list
        - summary
      properties:
        snapshot-id:
          type: integer
          format: int64
        parent-snapshot-id:
          type: integer
          format: int64
        sequence-number:
          type: integer
          format: int64
        timestamp-ms:
          type: integer
          format: int64
        manifest-list:
          type: string
          description: Location of the snapshot's manifest list file
        summary:
          type: object
          required:
            - operation
          properties:
            operation:
              type: string
              enum:
                - append
                - replace
                - overwrite
                - delete
          additionalProperties:
            type: string
        schema-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_SnapshotReference:
      type: object
      required:
        - type
        - snapshot-id
      properties:
        type:
          type: string
          enum:
            - tag
            - branch
        snapshot-id:
          type: integer
          format: int64
        max-ref-age-ms:
          type: integer
          format: int64
        max-snapshot-age-ms:
          type: integer
          format: int64
        min-snapshots-to-keep:
          type: integer
    Apache_Iceberg_REST_Catalog_API_SnapshotReferences:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SnapshotReference'
    Apache_Iceberg_REST_Catalog_API_SnapshotLog:
      type: array
      items:
        type: object
        required:
          - snapshot-id
          - timestamp-ms
        properties:
          snapshot-id:
            type: integer
            format: int64
          timestamp-ms:
            type: integer
            format: int64
    Apache_Iceberg_REST_Catalog_API_MetadataLog:
      type: array
      items:
        type: object
        required:
          - metadata-file
          - timestamp-ms
        properties:
          metadata-file:
            type: string
          timestamp-ms:
            type: integer
            format: int64
    Apache_Iceberg_REST_Catalog_API_TableMetadata:
      type: object
      required:
        - format-version
        - table-uuid
      properties:
        format-version:
          type: integer
          minimum: 1
          maximum: 2
        table-uuid:
          type: string
        location:
          type: string
        last-updated-ms:
          type: integer
          format: int64
        properties:
          type: object
          additionalProperties:
            type: string
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Schema'
        current-schema-id:
          type: integer
        last-column-id:
          type: integer
        partition-specs:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionSpec'
        default-spec-id:
          type: integer
        last-partition-id:
          type: integer
        sort-orders:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SortOrder'
        default-sort-order-id:
          type: integer
        snapshots:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Snapshot'
        refs:
          $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SnapshotReferences
        current-snapshot-id:
          type: integer
          format: int64
        last-sequence-number:
          type: integer
          format: int64
        snapshot-log:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SnapshotLog'
        metadata-log:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_MetadataLog'
        statistics-files:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_StatisticsFile
        partition-statistics-files:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionStatisticsFile
    Apache_Iceberg_REST_Catalog_API_SQLViewRepresentation:
      type: object
      required:
        - type
        - sql
        - dialect
      properties:
        type:
          type: string
        sql:
          type: string
        dialect:
          type: string
    Apache_Iceberg_REST_Catalog_API_ViewRepresentation:
      oneOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SQLViewRepresentation
    Apache_Iceberg_REST_Catalog_API_ViewHistoryEntry:
      type: object
      required:
        - version-id
        - timestamp-ms
      properties:
        version-id:
          type: integer
        timestamp-ms:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_ViewVersion:
      type: object
      required:
        - version-id
        - timestamp-ms
        - schema-id
        - summary
        - representations
        - default-namespace
      properties:
        version-id:
          type: integer
        timestamp-ms:
          type: integer
          format: int64
        schema-id:
          type: integer
          description: Schema ID to set as current, or -1 to set last added schema
        summary:
          type: object
          additionalProperties:
            type: string
        representations:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewRepresentation
        default-catalog:
          type: string
        default-namespace:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
    Apache_Iceberg_REST_Catalog_API_ViewMetadata:
      type: object
      required:
        - view-uuid
        - format-version
        - location
        - current-version-id
        - versions
        - version-log
        - schemas
      properties:
        view-uuid:
          type: string
        format-version:
          type: integer
          minimum: 1
          maximum: 1
        location:
          type: string
        current-version-id:
          type: integer
        versions:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewVersion'
        version-log:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewHistoryEntry
        schemas:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Schema'
        properties:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_BaseUpdate:
      discriminator:
        propertyName: action
        mapping:
          assign-uuid: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssignUUIDUpdate
          upgrade-format-version: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_UpgradeFormatVersionUpdate
          add-schema: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSchemaUpdate'
          set-current-schema: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetCurrentSchemaUpdate
          add-spec: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddPartitionSpecUpdate
          set-default-spec: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetDefaultSpecUpdate
          add-sort-order: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSortOrderUpdate
          set-default-sort-order: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetDefaultSortOrderUpdate
          add-snapshot: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSnapshotUpdate
          set-snapshot-ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetSnapshotRefUpdate
          remove-snapshots: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveSnapshotsUpdate
          remove-snapshot-ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveSnapshotRefUpdate
          set-location: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetLocationUpdate
          set-properties: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetPropertiesUpdate
          remove-properties: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemovePropertiesUpdate
          add-view-version: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddViewVersionUpdate
          set-current-view-version: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetCurrentViewVersionUpdate
          set-statistics: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetStatisticsUpdate
          remove-statistics: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveStatisticsUpdate
          set-partition-statistics: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetPartitionStatisticsUpdate
          remove-partition-statistics: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemovePartitionStatisticsUpdate
      type: object
      required:
        - action
      properties:
        action:
          type: string
    Apache_Iceberg_REST_Catalog_API_AssignUUIDUpdate:
      description: >-
        Assigning a UUID to a table/view should only be done when creating the
        table/view. It is not safe to re-assign the UUID if a table/view already
        has a UUID assigned
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - uuid
      properties:
        action:
          type: string
          enum:
            - assign-uuid
        uuid:
          type: string
    Apache_Iceberg_REST_Catalog_API_UpgradeFormatVersionUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - format-version
      properties:
        action:
          type: string
          enum:
            - upgrade-format-version
        format-version:
          type: integer
    Apache_Iceberg_REST_Catalog_API_AddSchemaUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - schema
      properties:
        action:
          type: string
          enum:
            - add-schema
        schema:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Schema'
        last-column-id:
          type: integer
          description: >-
            The highest assigned column ID for the table. This is used to ensure
            columns are always assigned an unused ID when evolving schemas. When
            omitted, it will be computed on the server side.
    Apache_Iceberg_REST_Catalog_API_SetCurrentSchemaUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - schema-id
      properties:
        action:
          type: string
          enum:
            - set-current-schema
        schema-id:
          type: integer
          description: Schema ID to set as current, or -1 to set last added schema
    Apache_Iceberg_REST_Catalog_API_AddPartitionSpecUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - spec
      properties:
        action:
          type: string
          enum:
            - add-spec
        spec:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionSpec'
    Apache_Iceberg_REST_Catalog_API_SetDefaultSpecUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - spec-id
      properties:
        action:
          type: string
          enum:
            - set-default-spec
        spec-id:
          type: integer
          description: >-
            Partition spec ID to set as the default, or -1 to set last added
            spec
    Apache_Iceberg_REST_Catalog_API_AddSortOrderUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - sort-order
      properties:
        action:
          type: string
          enum:
            - add-sort-order
        sort-order:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SortOrder'
    Apache_Iceberg_REST_Catalog_API_SetDefaultSortOrderUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - sort-order-id
      properties:
        action:
          type: string
          enum:
            - set-default-sort-order
        sort-order-id:
          type: integer
          description: >-
            Sort order ID to set as the default, or -1 to set last added sort
            order
    Apache_Iceberg_REST_Catalog_API_AddSnapshotUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - snapshot
      properties:
        action:
          type: string
          enum:
            - add-snapshot
        snapshot:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Snapshot'
    Apache_Iceberg_REST_Catalog_API_SetSnapshotRefUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SnapshotReference
      required:
        - action
        - ref-name
      properties:
        action:
          type: string
          enum:
            - set-snapshot-ref
        ref-name:
          type: string
    Apache_Iceberg_REST_Catalog_API_RemoveSnapshotsUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - snapshot-ids
      properties:
        action:
          type: string
          enum:
            - remove-snapshots
        snapshot-ids:
          type: array
          items:
            type: integer
            format: int64
    Apache_Iceberg_REST_Catalog_API_RemoveSnapshotRefUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - ref-name
      properties:
        action:
          type: string
          enum:
            - remove-snapshot-ref
        ref-name:
          type: string
    Apache_Iceberg_REST_Catalog_API_SetLocationUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - location
      properties:
        action:
          type: string
          enum:
            - set-location
        location:
          type: string
    Apache_Iceberg_REST_Catalog_API_SetPropertiesUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - updates
      properties:
        action:
          type: string
          enum:
            - set-properties
        updates:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_RemovePropertiesUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - removals
      properties:
        action:
          type: string
          enum:
            - remove-properties
        removals:
          type: array
          items:
            type: string
    Apache_Iceberg_REST_Catalog_API_AddViewVersionUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - view-version
      properties:
        action:
          type: string
          enum:
            - add-view-version
        view-version:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewVersion'
    Apache_Iceberg_REST_Catalog_API_SetCurrentViewVersionUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - view-version-id
      properties:
        action:
          type: string
          enum:
            - set-current-view-version
        view-version-id:
          type: integer
          description: >-
            The view version id to set as current, or -1 to set last added view
            version id
    Apache_Iceberg_REST_Catalog_API_SetStatisticsUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - snapshot-id
        - statistics
      properties:
        action:
          type: string
          enum:
            - set-statistics
        snapshot-id:
          type: integer
          format: int64
        statistics:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_StatisticsFile'
    Apache_Iceberg_REST_Catalog_API_RemoveStatisticsUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - snapshot-id
      properties:
        action:
          type: string
          enum:
            - remove-statistics
        snapshot-id:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_SetPartitionStatisticsUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - partition-statistics
      properties:
        action:
          type: string
          enum:
            - set-partition-statistics
        partition-statistics:
          $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionStatisticsFile
    Apache_Iceberg_REST_Catalog_API_RemovePartitionStatisticsUpdate:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BaseUpdate'
      required:
        - action
        - snapshot-id
      properties:
        action:
          type: string
          enum:
            - remove-partition-statistics
        snapshot-id:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_TableUpdate:
      anyOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssignUUIDUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_UpgradeFormatVersionUpdate
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSchemaUpdate'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetCurrentSchemaUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddPartitionSpecUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetDefaultSpecUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSortOrderUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetDefaultSortOrderUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSnapshotUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetSnapshotRefUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveSnapshotsUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveSnapshotRefUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetLocationUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetPropertiesUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemovePropertiesUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetStatisticsUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemoveStatisticsUpdate
    Apache_Iceberg_REST_Catalog_API_ViewUpdate:
      anyOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssignUUIDUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_UpgradeFormatVersionUpdate
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AddSchemaUpdate'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetLocationUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetPropertiesUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_RemovePropertiesUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AddViewVersionUpdate
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_SetCurrentViewVersionUpdate
    Apache_Iceberg_REST_Catalog_API_TableRequirement:
      discriminator:
        propertyName: type
        mapping:
          assert-create: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertCreate'
          assert-table-uuid: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertTableUUID'
          assert-ref-snapshot-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertRefSnapshotId
          assert-last-assigned-field-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertLastAssignedFieldId
          assert-current-schema-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertCurrentSchemaId
          assert-last-assigned-partition-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertLastAssignedPartitionId
          assert-default-spec-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertDefaultSpecId
          assert-default-sort-order-id: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertDefaultSortOrderId
      type: object
      required:
        - type
      properties:
        type:
          type: string
    Apache_Iceberg_REST_Catalog_API_AssertCreate:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      type: object
      description: The table must not already exist; used for create transactions
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - assert-create
    Apache_Iceberg_REST_Catalog_API_AssertTableUUID:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: The table UUID must match the requirement's `uuid`
      required:
        - type
        - uuid
      properties:
        type:
          type: string
          enum:
            - assert-table-uuid
        uuid:
          type: string
    Apache_Iceberg_REST_Catalog_API_AssertRefSnapshotId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table branch or tag identified by the requirement's `ref` must
        reference the requirement's `snapshot-id`; if `snapshot-id` is `null` or
        missing, the ref must not already exist
      required:
        - type
        - ref
        - snapshot-id
      properties:
        type:
          type: string
          enum:
            - assert-ref-snapshot-id
        ref:
          type: string
        snapshot-id:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_AssertLastAssignedFieldId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table's last assigned column id must match the requirement's
        `last-assigned-field-id`
      required:
        - type
        - last-assigned-field-id
      properties:
        type:
          type: string
          enum:
            - assert-last-assigned-field-id
        last-assigned-field-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_AssertCurrentSchemaId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table's current schema id must match the requirement's
        `current-schema-id`
      required:
        - type
        - current-schema-id
      properties:
        type:
          type: string
          enum:
            - assert-current-schema-id
        current-schema-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_AssertLastAssignedPartitionId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table's last assigned partition id must match the requirement's
        `last-assigned-partition-id`
      required:
        - type
        - last-assigned-partition-id
      properties:
        type:
          type: string
          enum:
            - assert-last-assigned-partition-id
        last-assigned-partition-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_AssertDefaultSpecId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table's default spec id must match the requirement's
        `default-spec-id`
      required:
        - type
        - default-spec-id
      properties:
        type:
          type: string
          enum:
            - assert-default-spec-id
        default-spec-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_AssertDefaultSortOrderId:
      allOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
      description: >-
        The table's default sort order id must match the requirement's
        `default-sort-order-id`
      required:
        - type
        - default-sort-order-id
      properties:
        type:
          type: string
          enum:
            - assert-default-sort-order-id
        default-sort-order-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_ViewRequirement:
      discriminator:
        propertyName: type
        mapping:
          assert-view-uuid: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_AssertViewUUID'
      type: object
      required:
        - type
      properties:
        type:
          type: string
    Apache_Iceberg_REST_Catalog_API_AssertViewUUID:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewRequirement'
      description: The view UUID must match the requirement's `uuid`
      required:
        - type
        - uuid
      properties:
        type:
          type: string
          enum:
            - assert-view-uuid
        uuid:
          type: string
    Apache_Iceberg_REST_Catalog_API_LoadTableResult:
      description: >
        Result used when a table is successfully loaded.



        The table metadata JSON is returned in the `metadata` field. The
        corresponding file location of table metadata should be returned in the
        `metadata-location` field, unless the metadata is not yet committed. For
        example, a create transaction may return metadata that is staged but not
        committed.

        Clients can check whether metadata has changed by comparing metadata
        locations after the table has been created.



        The `config` map returns table-specific configuration for the table's
        resources, including its HTTP client and FileIO. For example, config may
        contain a specific FileIO implementation class for the table depending
        on its underlying storage.



        The following configurations should be respected by clients:


        ## General Configurations


        - `token`: Authorization bearer token to use for table requests if
        OAuth2 security is enabled 


        ## AWS Configurations


        The following configurations should be respected when working with
        tables stored in AWS S3
         - `client.region`: region to configure client for making requests to AWS
         - `s3.access-key-id`: id for for credentials that provide access to the data in S3
         - `s3.secret-access-key`: secret for credentials that provide access to data in S3 
         - `s3.session-token`: if present, this value should be used for as the session token 
         - `s3.remote-signing-enabled`: if `true` remote signing should be performed as described in the `s3-signer-open-api.yaml` specification
      type: object
      required:
        - metadata
      properties:
        metadata-location:
          type: string
          description: May be null if the table is staged as part of a transaction
        metadata:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableMetadata'
        config:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_CommitTableRequest:
      type: object
      required:
        - requirements
        - updates
      properties:
        identifier:
          description: >-
            Table identifier to update; must be present for
            CommitTransactionRequest
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableIdentifier'
        requirements:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableRequirement
        updates:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableUpdate'
    Apache_Iceberg_REST_Catalog_API_CommitViewRequest:
      type: object
      required:
        - updates
      properties:
        identifier:
          description: View identifier to update
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableIdentifier'
        requirements:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewRequirement
        updates:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewUpdate'
    Apache_Iceberg_REST_Catalog_API_CommitTransactionRequest:
      type: object
      required:
        - table-changes
      properties:
        table-changes:
          type: array
          items:
            description: Table commit request; must provide an `identifier`
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitTableRequest
    Apache_Iceberg_REST_Catalog_API_CreateTableRequest:
      type: object
      required:
        - name
        - schema
      properties:
        name:
          type: string
        location:
          type: string
        schema:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Schema'
        partition-spec:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PartitionSpec'
        write-order:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_SortOrder'
        stage-create:
          type: boolean
        properties:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_RegisterTableRequest:
      type: object
      required:
        - name
        - metadata-location
      properties:
        name:
          type: string
        metadata-location:
          type: string
    Apache_Iceberg_REST_Catalog_API_CreateViewRequest:
      type: object
      required:
        - name
        - schema
        - view-version
        - properties
      properties:
        name:
          type: string
        location:
          type: string
        schema:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Schema'
        view-version:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewVersion'
          description: >-
            The view version to create, will replace the schema-id sent within
            the view-version with the id assigned to the provided schema
        properties:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_LoadViewResult:
      description: >
        Result used when a view is successfully loaded.



        The view metadata JSON is returned in the `metadata` field. The
        corresponding file location of view metadata is returned in the
        `metadata-location` field.

        Clients can check whether metadata has changed by comparing metadata
        locations after the view has been created.


        The `config` map returns view-specific configuration for the view's
        resources.


        The following configurations should be respected by clients:


        ## General Configurations


        - `token`: Authorization bearer token to use for view requests if OAuth2
        security is enabled
      type: object
      required:
        - metadata-location
        - metadata
      properties:
        metadata-location:
          type: string
        metadata:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ViewMetadata'
        config:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_TokenType:
      type: string
      enum:
        - urn:ietf:params:oauth:token-type:access_token
        - urn:ietf:params:oauth:token-type:refresh_token
        - urn:ietf:params:oauth:token-type:id_token
        - urn:ietf:params:oauth:token-type:saml1
        - urn:ietf:params:oauth:token-type:saml2
        - urn:ietf:params:oauth:token-type:jwt
      description: |-
        Token type identifier, from RFC 8693 Section 3

        See https://datatracker.ietf.org/doc/html/rfc8693#section-3
    Apache_Iceberg_REST_Catalog_API_OAuthClientCredentialsRequest:
      description: |-
        OAuth2 client credentials request

        See https://datatracker.ietf.org/doc/html/rfc6749#section-4.4
      type: object
      required:
        - grant_type
        - client_id
        - client_secret
      properties:
        grant_type:
          type: string
          enum:
            - client_credentials
        scope:
          type: string
        client_id:
          type: string
          description: >-
            Client ID


            This can be sent in the request body, but OAuth2 recommends sending
            it in a Basic Authorization header.
        client_secret:
          type: string
          description: >-
            Client secret


            This can be sent in the request body, but OAuth2 recommends sending
            it in a Basic Authorization header.
    Apache_Iceberg_REST_Catalog_API_OAuthTokenExchangeRequest:
      description: |-
        OAuth2 token exchange request

        See https://datatracker.ietf.org/doc/html/rfc8693
      type: object
      required:
        - grant_type
        - subject_token
        - subject_token_type
      properties:
        grant_type:
          type: string
          enum:
            - urn:ietf:params:oauth:grant-type:token-exchange
        scope:
          type: string
        requested_token_type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TokenType'
        subject_token:
          type: string
          description: Subject token for token exchange request
        subject_token_type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TokenType'
        actor_token:
          type: string
          description: Actor token for token exchange request
        actor_token_type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TokenType'
    Apache_Iceberg_REST_Catalog_API_OAuthTokenRequest:
      anyOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_OAuthClientCredentialsRequest
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_OAuthTokenExchangeRequest
    Apache_Iceberg_REST_Catalog_API_CounterResult:
      type: object
      required:
        - unit
        - value
      properties:
        unit:
          type: string
        value:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_TimerResult:
      type: object
      required:
        - time-unit
        - count
        - total-duration
      properties:
        time-unit:
          type: string
        count:
          type: integer
          format: int64
        total-duration:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_MetricResult:
      anyOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CounterResult'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TimerResult'
    Apache_Iceberg_REST_Catalog_API_Metrics:
      type: object
      additionalProperties:
        $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_MetricResult'
      example:
        metrics:
          total-planning-duration:
            count: 1
            time-unit: nanoseconds
            total-duration: 2644235116
          result-data-files:
            unit: count
            value: 1
          result-delete-files:
            unit: count
            value: 0
          total-data-manifests:
            unit: count
            value: 1
          total-delete-manifests:
            unit: count
            value: 0
          scanned-data-manifests:
            unit: count
            value: 1
          skipped-data-manifests:
            unit: count
            value: 0
          total-file-size-bytes:
            unit: bytes
            value: 10
          total-delete-file-size-bytes:
            unit: bytes
            value: 0
    Apache_Iceberg_REST_Catalog_API_ReportMetricsRequest:
      anyOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ScanReport'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitReport'
      required:
        - report-type
      properties:
        report-type:
          type: string
    Apache_Iceberg_REST_Catalog_API_ScanReport:
      type: object
      required:
        - table-name
        - snapshot-id
        - filter
        - schema-id
        - projected-field-ids
        - projected-field-names
        - metrics
      properties:
        table-name:
          type: string
        snapshot-id:
          type: integer
          format: int64
        filter:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Expression'
        schema-id:
          type: integer
        projected-field-ids:
          type: array
          items:
            type: integer
        projected-field-names:
          type: array
          items:
            type: string
        metrics:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Metrics'
        metadata:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_CommitReport:
      type: object
      required:
        - table-name
        - snapshot-id
        - sequence-number
        - operation
        - metrics
      properties:
        table-name:
          type: string
        snapshot-id:
          type: integer
          format: int64
        sequence-number:
          type: integer
          format: int64
        operation:
          type: string
        metrics:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Metrics'
        metadata:
          type: object
          additionalProperties:
            type: string
    Apache_Iceberg_REST_Catalog_API_NotificationRequest:
      required:
        - notification-type
      properties:
        notification-type:
          $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_NotificationType
        payload:
          $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableUpdateNotification
    Apache_Iceberg_REST_Catalog_API_NotificationType:
      type: string
      enum:
        - UNKNOWN
        - CREATE
        - UPDATE
        - DROP
    Apache_Iceberg_REST_Catalog_API_TableUpdateNotification:
      type: object
      required:
        - table-name
        - timestamp
        - table-uuid
        - metadata-location
      properties:
        table-name:
          type: string
        timestamp:
          type: integer
          format: int64
        table-uuid:
          type: string
        metadata-location:
          type: string
        metadata:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableMetadata'
    Apache_Iceberg_REST_Catalog_API_OAuthError:
      type: object
      required:
        - error
      properties:
        error:
          type: string
          enum:
            - invalid_request
            - invalid_client
            - invalid_grant
            - unauthorized_client
            - unsupported_grant_type
            - invalid_scope
        error_description:
          type: string
        error_uri:
          type: string
    Apache_Iceberg_REST_Catalog_API_OAuthTokenResponse:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
          description: The access token, for client credentials or token exchange
        token_type:
          type: string
          enum:
            - bearer
            - mac
            - N_A
          description: |-
            Access token type for client credentials or token exchange

            See https://datatracker.ietf.org/doc/html/rfc6749#section-7.1
        expires_in:
          type: integer
          description: >-
            Lifetime of the access token in seconds for client credentials or
            token exchange
        issued_token_type:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TokenType'
        refresh_token:
          type: string
          description: Refresh token for client credentials or token exchange
        scope:
          type: string
          description: Authorization scope for client credentials or token exchange
    Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse:
      description: JSON wrapper for all error responses (non-2xx)
      type: object
      required:
        - error
      properties:
        error:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel'
      additionalProperties: false
      example:
        error:
          message: The server does not support this operation
          type: UnsupportedOperationException
          code: 406
    Apache_Iceberg_REST_Catalog_API_CreateNamespaceResponse:
      type: object
      required:
        - namespace
      properties:
        namespace:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
        properties:
          type: object
          additionalProperties:
            type: string
          description: Properties stored on the namespace, if supported by the server.
          example:
            owner: Ralph
            created_at: '1452120468'
          default: {}
    Apache_Iceberg_REST_Catalog_API_GetNamespaceResponse:
      type: object
      required:
        - namespace
      properties:
        namespace:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
        properties:
          type: object
          description: >-
            Properties stored on the namespace, if supported by the server. If
            the server does not support namespace properties, it should return
            null for this field. If namespace properties are supported, but none
            are set, it should return an empty object.
          additionalProperties:
            type: string
          example:
            owner: Ralph
            transient_lastDdlTime: '1452120468'
          default: {}
          nullable: true
    Apache_Iceberg_REST_Catalog_API_ListTablesResponse:
      type: object
      properties:
        next-page-token:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PageToken'
        identifiers:
          type: array
          uniqueItems: true
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_TableIdentifier
    Apache_Iceberg_REST_Catalog_API_ListNamespacesResponse:
      type: object
      properties:
        next-page-token:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PageToken'
        namespaces:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_Namespace'
    Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesResponse:
      type: object
      required:
        - updated
        - removed
      properties:
        updated:
          description: List of property keys that were added or updated
          type: array
          uniqueItems: true
          items:
            type: string
        removed:
          description: List of properties that were removed
          type: array
          items:
            type: string
        missing:
          type: array
          items:
            type: string
          description: >-
            List of properties requested for removal that were not found in the
            namespace's properties. Represents a partial success response.
            Server's do not need to implement this.
          nullable: true
    Apache_Iceberg_REST_Catalog_API_CommitTableResponse:
      type: object
      required:
        - metadata-location
        - metadata
      properties:
        metadata-location:
          type: string
        metadata:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TableMetadata'
    Apache_Iceberg_REST_Catalog_API_StatisticsFile:
      type: object
      required:
        - snapshot-id
        - statistics-path
        - file-size-in-bytes
        - file-footer-size-in-bytes
        - blob-metadata
      properties:
        snapshot-id:
          type: integer
          format: int64
        statistics-path:
          type: string
        file-size-in-bytes:
          type: integer
          format: int64
        file-footer-size-in-bytes:
          type: integer
          format: int64
        blob-metadata:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BlobMetadata'
    Apache_Iceberg_REST_Catalog_API_BlobMetadata:
      type: object
      required:
        - type
        - snapshot-id
        - sequence-number
        - fields
      properties:
        type:
          type: string
        snapshot-id:
          type: integer
          format: int64
        sequence-number:
          type: integer
          format: int64
        fields:
          type: array
          items:
            type: integer
        properties:
          type: object
    Apache_Iceberg_REST_Catalog_API_PartitionStatisticsFile:
      type: object
      required:
        - snapshot-id
        - statistics-path
        - file-size-in-bytes
      properties:
        snapshot-id:
          type: integer
          format: int64
        statistics-path:
          type: string
        file-size-in-bytes:
          type: integer
          format: int64
    Apache_Iceberg_REST_Catalog_API_BooleanTypeValue:
      type: boolean
      example: true
    Apache_Iceberg_REST_Catalog_API_IntegerTypeValue:
      type: integer
      example: 42
    Apache_Iceberg_REST_Catalog_API_LongTypeValue:
      type: integer
      format: int64
      example: 9223372036854776000
    Apache_Iceberg_REST_Catalog_API_FloatTypeValue:
      type: number
      format: float
      example: 3.14
    Apache_Iceberg_REST_Catalog_API_DoubleTypeValue:
      type: number
      format: double
      example: 123.456
    Apache_Iceberg_REST_Catalog_API_DecimalTypeValue:
      type: string
      description: >-
        Decimal type values are serialized as strings. Decimals with a positive
        scale serialize as numeric plain  text, while decimals with a negative
        scale use scientific notation and the exponent will be equal to the 
        negated scale. For instance, a decimal with a positive scale is
        '123.4500', with zero scale is '2',  and with a negative scale is
        '2E+20'
      example: '123.4500'
    Apache_Iceberg_REST_Catalog_API_StringTypeValue:
      type: string
      example: hello
    Apache_Iceberg_REST_Catalog_API_UUIDTypeValue:
      type: string
      format: uuid
      pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$
      maxLength: 36
      minLength: 36
      description: >-
        UUID type values are serialized as a 36-character lowercase string in
        standard UUID format as specified  by RFC-4122
      example: eb26bdb1-a1d8-4aa6-990e-da940875492c
    Apache_Iceberg_REST_Catalog_API_DateTypeValue:
      type: string
      format: date
      description: Date type values follow the 'YYYY-MM-DD' ISO-8601 standard date format
      example: '2007-12-03'
    Apache_Iceberg_REST_Catalog_API_TimeTypeValue:
      type: string
      description: >-
        Time type values follow the 'HH:MM:SS.ssssss' ISO-8601 format with
        microsecond precision
      example: '22:31:08.123456'
    Apache_Iceberg_REST_Catalog_API_TimestampTypeValue:
      type: string
      description: >-
        Timestamp type values follow the 'YYYY-MM-DDTHH:MM:SS.ssssss' ISO-8601
        format with microsecond precision
      example: '2007-12-03T10:15:30.123456'
    Apache_Iceberg_REST_Catalog_API_TimestampTzTypeValue:
      type: string
      description: >-
        TimestampTz type values follow the 'YYYY-MM-DDTHH:MM:SS.ssssss+00:00'
        ISO-8601 format with microsecond precision,  and a timezone offset
        (+00:00 for UTC)
      example: '2007-12-03T10:15:30.123456+00:00'
    Apache_Iceberg_REST_Catalog_API_TimestampNanoTypeValue:
      type: string
      description: >-
        Timestamp_ns type values follow the 'YYYY-MM-DDTHH:MM:SS.sssssssss'
        ISO-8601 format with nanosecond precision
      example: '2007-12-03T10:15:30.123456789'
    Apache_Iceberg_REST_Catalog_API_TimestampTzNanoTypeValue:
      type: string
      description: >-
        Timestamp_ns type values follow the
        'YYYY-MM-DDTHH:MM:SS.sssssssss+00:00' ISO-8601 format with nanosecond 
        precision, and a timezone offset (+00:00 for UTC)
      example: '2007-12-03T10:15:30.123456789+00:00'
    Apache_Iceberg_REST_Catalog_API_FixedTypeValue:
      type: string
      description: >-
        Fixed length type values are stored and serialized as an uppercase
        hexadecimal string  preserving the fixed length
      example: 78797A
    Apache_Iceberg_REST_Catalog_API_BinaryTypeValue:
      type: string
      description: >-
        Binary type values are stored and serialized as an uppercase hexadecimal
        string
      example: 78797A
    Apache_Iceberg_REST_Catalog_API_CountMap:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IntegerTypeValue
          description: List of integer column ids for each corresponding value
        values:
          type: array
          items:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_LongTypeValue'
          description: List of Long values, matched to 'keys' by index
      example:
        keys:
          - 1
          - 2
        values:
          - 100
          - 200
    Apache_Iceberg_REST_Catalog_API_ValueMap:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IntegerTypeValue
          description: List of integer column ids for each corresponding value
        values:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_PrimitiveTypeValue
          description: List of primitive type values, matched to 'keys' by index
      example:
        keys:
          - 1
          - 2
        values:
          - 100
          - test
    Apache_Iceberg_REST_Catalog_API_PrimitiveTypeValue:
      oneOf:
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_BooleanTypeValue
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_IntegerTypeValue
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_LongTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_FloatTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_DoubleTypeValue'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_DecimalTypeValue
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_StringTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_UUIDTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_DateTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_TimeTypeValue'
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TimestampTypeValue
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TimestampTzTypeValue
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TimestampNanoTypeValue
        - $ref: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_TimestampTzNanoTypeValue
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_FixedTypeValue'
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_BinaryTypeValue'
    Apache_Iceberg_REST_Catalog_API_FileFormat:
      type: string
      enum:
        - avro
        - orc
        - parquet
    Apache_Iceberg_REST_Catalog_API_ContentFile:
      discriminator:
        propertyName: content
        mapping:
          data: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_DataFile'
          position-deletes: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_PositionDeleteFile
          equality-deletes: >-
            #/components/schemas/Apache_Iceberg_REST_Catalog_API_EqualityDeleteFile
      type: object
      required:
        - spec-id
        - content
        - file-path
        - file-format
        - file-size-in-bytes
        - record-count
      properties:
        content:
          type: string
        file-path:
          type: string
        file-format:
          $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_FileFormat'
        spec-id:
          type: integer
        partition:
          type: array
          items:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_PrimitiveTypeValue
          description: >-
            A list of partition field values ordered based on the fields of the
            partition spec specified by the  `spec-id`
          example:
            - 1
            - bar
        file-size-in-bytes:
          type: integer
          format: int64
          description: Total file size in bytes
        record-count:
          type: integer
          format: int64
          description: Number of records in the file
        key-metadata:
          allOf:
            - $ref: >-
                #/components/schemas/Apache_Iceberg_REST_Catalog_API_BinaryTypeValue
          description: Encryption key metadata blob
        split-offsets:
          type: array
          items:
            type: integer
            format: int64
          description: List of splittable offsets
        sort-order-id:
          type: integer
    Apache_Iceberg_REST_Catalog_API_DataFile:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ContentFile'
      type: object
      required:
        - content
      properties:
        content:
          type: string
          enum:
            - data
        column-sizes:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CountMap'
          description: Map of column id to total count, including null and NaN
        value-counts:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CountMap'
          description: Map of column id to null value count
        null-value-counts:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CountMap'
          description: Map of column id to null value count
        nan-value-counts:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_CountMap'
          description: Map of column id to number of NaN values in the column
        lower-bounds:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ValueMap'
          description: Map of column id to lower bound primitive type values
        upper-bounds:
          allOf:
            - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ValueMap'
          description: Map of column id to upper bound primitive type values
    Apache_Iceberg_REST_Catalog_API_PositionDeleteFile:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ContentFile'
      required:
        - content
      properties:
        content:
          type: string
          enum:
            - position-deletes
    Apache_Iceberg_REST_Catalog_API_EqualityDeleteFile:
      allOf:
        - $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ContentFile'
      required:
        - content
      properties:
        content:
          type: string
          enum:
            - equality-deletes
        equality-ids:
          type: array
          items:
            type: integer
          description: List of equality field IDs
  parameters:
    Apache_Iceberg_REST_Catalog_API_namespace:
      name: namespace
      in: path
      required: true
      description: >-
        A namespace identifier as a single string. Multipart namespace parts
        should be separated by the unit separator (`0x1F`) byte.
      schema:
        type: string
      examples:
        singlepart_namespace:
          value: accounting
        multipart_namespace:
          value: accounting%1Ftax
    Apache_Iceberg_REST_Catalog_API_prefix:
      name: prefix
      in: path
      schema:
        type: string
      required: true
      description: An optional prefix in the path
    Apache_Iceberg_REST_Catalog_API_table:
      name: table
      in: path
      description: A table name
      required: true
      schema:
        type: string
      example: sales
    Apache_Iceberg_REST_Catalog_API_view:
      name: view
      in: path
      description: A view name
      required: true
      schema:
        type: string
      example: sales
    Apache_Iceberg_REST_Catalog_API_data-access:
      name: X-Iceberg-Access-Delegation
      in: header
      description: >
        Optional signal to the server that the client supports delegated access
        via a comma-separated list of access mechanisms.  The server may choose
        to supply access via any or none of the requested mechanisms.


        Specific properties and handling for `vended-credentials` is documented
        in the `LoadTableResult` schema section of this spec document.


        The protocol and specification for `remote-signing` is documented in 
        the `s3-signer-open-api.yaml` OpenApi spec in the `aws` module.
      required: false
      schema:
        type: string
        enum:
          - vended-credentials
          - remote-signing
      style: simple
      explode: false
      example: vended-credentials,remote-signing
    Apache_Iceberg_REST_Catalog_API_page-token:
      name: pageToken
      in: query
      required: false
      allowEmptyValue: true
      schema:
        $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_PageToken'
    Apache_Iceberg_REST_Catalog_API_page-size:
      name: pageSize
      in: query
      description: >-
        For servers that support pagination, this signals an upper bound of the
        number of results that a client will receive. For servers that do not
        support pagination, clients may receive results larger than the
        indicated `pageSize`.
      required: false
      schema:
        type: integer
        minimum: 1
  responses:
    Apache_Iceberg_REST_Catalog_API_OAuthTokenResponse:
      description: OAuth2 token response for client credentials or token exchange
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_OAuthTokenResponse
    Apache_Iceberg_REST_Catalog_API_OAuthErrorResponse:
      description: OAuth2 error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_OAuthError'
    Apache_Iceberg_REST_Catalog_API_BadRequestErrorResponse:
      description: >-
        Indicates a bad request error. It could be caused by an unexpected
        request body format or other forms of request validation failure, such
        as invalid json. Usually serves application/json content, although in
        some cases simple text/plain content might be returned by the server's
        middleware.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Malformed request
              type: BadRequestException
              code: 400
    Apache_Iceberg_REST_Catalog_API_UnauthorizedResponse:
      description: >-
        Unauthorized. Authentication is required and has failed or has not yet
        been provided.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Not authorized to make this request
              type: NotAuthorizedException
              code: 401
    Apache_Iceberg_REST_Catalog_API_ForbiddenResponse:
      description: Forbidden. Authenticated user does not have the necessary permissions.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Not authorized to make this request
              type: NotAuthorizedException
              code: 403
    Apache_Iceberg_REST_Catalog_API_UnsupportedOperationResponse:
      description: >-
        Not Acceptable / Unsupported Operation. The server does not support this
        operation.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Apache_Iceberg_REST_Catalog_API_ErrorModel'
          example:
            error:
              message: The server does not support this operation
              type: UnsupportedOperationException
              code: 406
    Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse:
      description: JSON wrapper for all error responses (non-2xx)
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: The server does not support this operation
              type: UnsupportedOperationException
              code: 406
    Apache_Iceberg_REST_Catalog_API_CreateNamespaceResponse:
      description: >-
        Represents a successful call to create a namespace. Returns the
        namespace created, as well as any properties that were stored for the
        namespace, including those the server might have added. Implementations
        are not required to support namespace properties.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_CreateNamespaceResponse
          example:
            namespace:
              - accounting
              - tax
            properties:
              owner: Ralph
              created_at: '1452120468'
    Apache_Iceberg_REST_Catalog_API_GetNamespaceResponse:
      description: >-
        Returns a namespace, as well as any properties stored on the namespace
        if namespace properties are supported by the server.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_GetNamespaceResponse
    Apache_Iceberg_REST_Catalog_API_ListTablesResponse:
      description: A list of table identifiers
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_ListTablesResponse
          examples:
            ListTablesResponseNonEmpty:
              $ref: >-
                #/components/examples/Apache_Iceberg_REST_Catalog_API_ListTablesNonEmptyExample
            ListTablesResponseEmpty:
              $ref: >-
                #/components/examples/Apache_Iceberg_REST_Catalog_API_ListTablesEmptyExample
    Apache_Iceberg_REST_Catalog_API_ListNamespacesResponse:
      description: A list of namespaces
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_ListNamespacesResponse
          examples:
            NonEmptyResponse:
              $ref: >-
                #/components/examples/Apache_Iceberg_REST_Catalog_API_ListNamespacesNonEmptyExample
            EmptyResponse:
              $ref: >-
                #/components/examples/Apache_Iceberg_REST_Catalog_API_ListNamespacesEmptyExample
    Apache_Iceberg_REST_Catalog_API_AuthenticationTimeoutResponse:
      description: >-
        Credentials have timed out. If possible, the client should refresh
        credentials and retry.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Credentials have timed out
              type: AuthenticationTimeoutException
              code: 419
    Apache_Iceberg_REST_Catalog_API_ServiceUnavailableResponse:
      description: >-
        The service is not ready to handle the request. The client should wait
        and retry.


        The service may additionally send a Retry-After header to indicate when
        to retry.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Slow down
              type: SlowDownException
              code: 503
    Apache_Iceberg_REST_Catalog_API_ServerErrorResponse:
      description: >-
        A server-side problem that might not be addressable from the client
        side. Used for server 5xx errors without more specific documentation in
        individual routes.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_IcebergErrorResponse
          example:
            error:
              message: Internal Server Error
              type: InternalServerError
              code: 500
    Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesResponse:
      description: JSON data response for a synchronous update properties request.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_UpdateNamespacePropertiesResponse
          example:
            updated:
              - owner
            removed:
              - foo
            missing:
              - bar
    Apache_Iceberg_REST_Catalog_API_CreateTableResponse:
      description: Table metadata result after creating a table
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_LoadTableResult
    Apache_Iceberg_REST_Catalog_API_LoadTableResponse:
      description: Table metadata result when loading a table
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_LoadTableResult
    Apache_Iceberg_REST_Catalog_API_LoadViewResponse:
      description: View metadata result when loading a view
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_LoadViewResult
    Apache_Iceberg_REST_Catalog_API_CommitTableResponse:
      description: >-
        Response used when a table is successfully updated.

        The table metadata JSON is returned in the metadata field. The
        corresponding file location of table metadata must be returned in the
        metadata-location field. Clients can check whether metadata has changed
        by comparing metadata locations.
      content:
        application/json:
          schema:
            $ref: >-
              #/components/schemas/Apache_Iceberg_REST_Catalog_API_CommitTableResponse
  examples:
    Apache_Iceberg_REST_Catalog_API_ListTablesEmptyExample:
      summary: An empty list for a namespace with no tables
      value:
        identifiers: []
    Apache_Iceberg_REST_Catalog_API_ListNamespacesEmptyExample:
      summary: An empty list of namespaces
      value:
        namespaces: []
    Apache_Iceberg_REST_Catalog_API_ListNamespacesNonEmptyExample:
      summary: A non-empty list of namespaces
      value:
        namespaces:
          - - accounting
            - tax
          - - accounting
            - credits
    Apache_Iceberg_REST_Catalog_API_ListTablesNonEmptyExample:
      summary: A non-empty list of table identifiers
      value:
        identifiers:
          - namespace:
              - accounting
              - tax
            name: paid
          - namespace:
              - accounting
              - tax
            name: owed
    Apache_Iceberg_REST_Catalog_API_MultipartNamespaceAsPathVariable:
      summary: A multi-part namespace, as represented in a path parameter
      value: accounting%1Ftax
    Apache_Iceberg_REST_Catalog_API_NamespaceAsPathVariable:
      summary: A single part namespace, as represented in a path paremeter
      value: accounting
    Apache_Iceberg_REST_Catalog_API_NamespaceAlreadyExistsError:
      summary: The requested namespace already exists
      value:
        error:
          message: The given namespace already exists
          type: AlreadyExistsException
          code: 409
    Apache_Iceberg_REST_Catalog_API_NoSuchTableError:
      summary: The requested table does not exist
      value:
        error:
          message: The given table does not exist
          type: NoSuchTableException
          code: 404
    Apache_Iceberg_REST_Catalog_API_NoSuchViewError:
      summary: The requested view does not exist
      value:
        error:
          message: The given view does not exist
          type: NoSuchViewException
          code: 404
    Apache_Iceberg_REST_Catalog_API_NoSuchNamespaceError:
      summary: The requested namespace does not exist
      value:
        error:
          message: The given namespace does not exist
          type: NoSuchNamespaceException
          code: 404
    Apache_Iceberg_REST_Catalog_API_RenameTableSameNamespace:
      summary: Rename a table in the same namespace
      value:
        source:
          namespace:
            - accounting
            - tax
          name: paid
        destination:
          namespace:
            - accounting
            - tax
          name: owed
    Apache_Iceberg_REST_Catalog_API_RenameViewSameNamespace:
      summary: Rename a view in the same namespace
      value:
        source:
          namespace:
            - accounting
            - tax
          name: paid-view
        destination:
          namespace:
            - accounting
            - tax
          name: owed-view
    Apache_Iceberg_REST_Catalog_API_TableAlreadyExistsError:
      summary: The requested table identifier already exists
      value:
        error:
          message: The given table already exists
          type: AlreadyExistsException
          code: 409
    Apache_Iceberg_REST_Catalog_API_ViewAlreadyExistsError:
      summary: The requested view identifier already exists
      value:
        error:
          message: The given view already exists
          type: AlreadyExistsException
          code: 409
    Apache_Iceberg_REST_Catalog_API_UnprocessableEntityDuplicateKey:
      summary: >-
        The request body either has the same key multiple times in what should
        be a map with unique keys or the request body has keys in two or more
        fields which should be disjoint sets.
      value:
        error:
          message: >-
            The request cannot be processed as there is a key present multiple
            times
          type: UnprocessableEntityException
          code: 422
    Apache_Iceberg_REST_Catalog_API_UpdateAndRemoveNamespacePropertiesRequest:
      summary: >-
        An update namespace properties request with both properties to remove
        and properties to upsert.
      value:
        removals:
          - foo
          - bar
        updates:
          owner: Raoul
x-tagGroups:
  - name: Polaris Catalog Documentation
    tags:
      - Polaris Catalog Overview
      - Polaris Catalog Entities
      - Access Control
  - name: Polaris Management Service
    tags:
      - polaris-management-service_other
  - name: Apache Iceberg REST Catalog API
    tags:
      - Configuration API
      - OAuth2 API
      - Catalog API
