/*
 * Copyright (c) 2024 Snowflake Computing Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    alias(libs.plugins.shadow)
    alias(libs.plugins.openapi.generator)
}

dependencies {
    implementation(project(":polaris-core"))
    implementation(project(":polaris-eclipselink"))
    
    implementation(platform(libs.iceberg.bom))
    implementation("org.apache.iceberg:iceberg-api")
    implementation("org.apache.iceberg:iceberg-core")
    implementation("org.apache.iceberg:iceberg-aws")

    implementation(platform(libs.dropwizard.bom))
    implementation("io.dropwizard:dropwizard-core")
    implementation("io.dropwizard:dropwizard-auth")
    implementation("io.dropwizard:dropwizard-json-logging")

    implementation(platform(libs.jackson.bom))
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-xml")

    implementation(platform(libs.opentelemetry.bom))
    implementation("io.opentelemetry:opentelemetry-api")
    implementation("io.opentelemetry:opentelemetry-sdk-trace")
    implementation("io.opentelemetry:opentelemetry-exporter-logging")
    implementation(libs.opentelemetry.semconv)

    implementation(libs.caffeine)

    implementation(libs.prometheus.metrics.exporter.servlet.jakarta)
    implementation(platform(libs.micrometer.bom))
    implementation("io.micrometer:micrometer-core")
    implementation("io.micrometer:micrometer-registry-prometheus")

    compileOnly(libs.swagger.annotations)
    implementation(libs.swagger.jaxrs)
    implementation(libs.javax.annotation.api)

    implementation(libs.hadoop.client.api)

    implementation(libs.sqllite.jdbc)
    implementation(libs.auth0.jwt)

    implementation(libs.logback.core)
    implementation(libs.bouncycastle.bcprov)

    implementation(platform(libs.google.cloud.storage.bom))
    implementation("com.google.cloud:google-cloud-storage")
    implementation(platform(libs.awssdk.bom))
    implementation("software.amazon.awssdk:sts")
    implementation("software.amazon.awssdk:sts")
    implementation("software.amazon.awssdk:iam-policy-builder")
    implementation("software.amazon.awssdk:s3")

    testImplementation("org.apache.iceberg:iceberg-api:${libs.versions.iceberg.get()}:tests")
    testImplementation("org.apache.iceberg:iceberg-core:${libs.versions.iceberg.get()}:tests")
    testImplementation("io.dropwizard:dropwizard-testing")
    testImplementation(platform(libs.testcontainers.bom))
    testImplementation("org.testcontainers:testcontainers")
    testImplementation(libs.s3mock.testcontainers)

    testImplementation("org.apache.iceberg:iceberg-spark-3.5_2.12")
    testImplementation("org.apache.iceberg:iceberg-spark-extensions-3.5_2.12")
    testImplementation("org.apache.spark:spark-sql_2.12:3.5.1") {
        // exclude log4j dependencies
        exclude group: "org.apache.logging.log4j", module: "log4j-slf4j2-impl"
        exclude group: "org.apache.logging.log4j", module: "log4j-api"
        exclude group: "org.apache.logging.log4j", module: "log4j-1.2-api"
    }

    testImplementation("software.amazon.awssdk:glue")
    testImplementation("software.amazon.awssdk:kms")
    testImplementation("software.amazon.awssdk:dynamodb")
}

openApiGenerate {
    inputSpec = "$rootDir/spec/rest-catalog-open-api.yaml"
    generatorName = "jaxrs-resteasy"
    outputDir = "$buildDir/generated"
    apiPackage = "io.polaris.service.catalog.api"
    ignoreFileOverride = "$rootDir/.openapi-generator-ignore"
    removeOperationIdPrefix = true
    templateDir = "$rootDir/server-templates"
    globalProperties = [
            apis      : "",
            models    : "false",
            apiDocs   : "false",
            modelTests: "false",
    ]
    configOptions = [
            resourceName     : "catalog",
            useTags          : "true",
            useBeanValidation: "false",
            sourceFolder     : "src/main/java",
            useJakartaEe     : "true"
    ]
    openapiNormalizer = ["REFACTOR_ALLOF_WITH_PROPERTIES_ONLY": "true"]
    additionalProperties = [apiNamePrefix: "IcebergRest", apiNameSuffix: "", metricsPrefix: "polaris"]
    serverVariables = [basePath: "api/catalog"]
    importMappings = [
            CatalogConfig                    : "org.apache.iceberg.rest.responses.ConfigResponse",
            CommitTableResponse              : "org.apache.iceberg.rest.responses.LoadTableResponse",
            CreateNamespaceRequest           : "org.apache.iceberg.rest.requests.CreateNamespaceRequest",
            CreateNamespaceResponse          : "org.apache.iceberg.rest.responses.CreateNamespaceResponse",
            CreateTableRequest               : "org.apache.iceberg.rest.requests.CreateTableRequest",
            ErrorModel                       : "org.apache.iceberg.rest.responses.ErrorResponse",
            GetNamespaceResponse             : "org.apache.iceberg.rest.responses.GetNamespaceResponse",
            ListNamespacesResponse           : "org.apache.iceberg.rest.responses.ListNamespacesResponse",
            ListTablesResponse               : "org.apache.iceberg.rest.responses.ListTablesResponse",
            LoadTableResult                  : "org.apache.iceberg.rest.responses.LoadTableResponse",
            LoadViewResult                   : "org.apache.iceberg.rest.responses.LoadTableResponse",
            OAuthTokenResponse               : "org.apache.iceberg.rest.responses.OAuthTokenResponse",
            OAuthErrorResponse               : "org.apache.iceberg.rest.responses.OAuthErrorResponse",
            RenameTableRequest               : "org.apache.iceberg.rest.requests.RenameTableRequest",
            ReportMetricsRequest             : "org.apache.iceberg.rest.requests.ReportMetricsRequest",
            UpdateNamespacePropertiesRequest : "org.apache.iceberg.rest.requests.UpdateNamespacePropertiesRequest",
            UpdateNamespacePropertiesResponse: "org.apache.iceberg.rest.responses.UpdateNamespacePropertiesResponse",
            CommitTransactionRequest         : "org.apache.iceberg.rest.requests.CommitTransactionRequest",
            CreateViewRequest                : "org.apache.iceberg.rest.requests.CreateViewRequest",
            RegisterTableRequest             : "org.apache.iceberg.rest.requests.RegisterTableRequest",
            IcebergErrorResponse             : "org.apache.iceberg.rest.responses.ErrorResponse",
            OAuthError                       : "org.apache.iceberg.rest.responses.ErrorResponse",

            // Custom types defined below
            CommitViewRequest                : "io.polaris.service.types.CommitViewRequest",
            TokenType                        : "io.polaris.service.types.TokenType",
            CommitTableRequest               : "io.polaris.service.types.CommitTableRequest",

            NotificationRequest              : "io.polaris.service.types.NotificationRequest",
            TableUpdateNotification          : "io.polaris.service.types.TableUpdateNotification",
            NotificationType                 : "io.polaris.service.types.NotificationType"
    ]
}

task generatePolarisService(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    inputSpec = "$rootDir/spec/polaris-management-service.yml"
    generatorName = "jaxrs-resteasy"
    outputDir = "$buildDir/generated"
    apiPackage = "io.polaris.service.admin.api"
    modelPackage = "io.polaris.core.admin.model"
    ignoreFileOverride = "$rootDir/.openapi-generator-ignore"
    removeOperationIdPrefix = true
    templateDir = "$rootDir/server-templates"
    globalProperties = [
            apis      : "",
            models    : "false",
            apiDocs   : "false",
            modelTests: "false"
    ]
    configOptions = [
            useBeanValidation             : "true",
            sourceFolder                  : "src/main/java",
            useJakartaEe                  : "true",
            generateBuilders              : "true",
            generateConstructorWithAllArgs: "true",
    ]
    additionalProperties = [apiNamePrefix: "Polaris", apiNameSuffix: "Api", metricsPrefix: "polaris"]
    serverVariables = [basePath: "api/v1"]
}

compileJava.dependsOn tasks.openApiGenerate, tasks.generatePolarisService
sourceSets.main.java.srcDirs += ["$buildDir/generated/src/main/java"]

test {
    if (System.getenv("AWS_REGION") == null) {
        environment "AWS_REGION", "us-west-2"
    }
    jvmArgs "--add-exports", "java.base/sun.nio.ch=ALL-UNNAMED"
    useJUnitPlatform()
    maxParallelForks = 4
}

task runApp(type: JavaExec) {
    if (System.getenv("AWS_REGION") == null) {
        environment "AWS_REGION", "us-west-2"
    }
    classpath = sourceSets.main.runtimeClasspath
    mainClass = "io.polaris.service.PolarisApplication"
    args "server", "$rootDir/polaris-server.yml"
}

application {
    mainClass = "io.polaris.service.PolarisApplication"
}

jar {
    manifest {
        attributes "Main-Class": "io.polaris.service.PolarisApplication"
    }
}

shadowJar {
    mainClassName = "io.polaris.service.PolarisApplication"
    mergeServiceFiles()
    zip64 true
}

build.dependsOn(shadowJar)
